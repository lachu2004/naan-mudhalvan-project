{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "aAoM0eehGuPA",
        "outputId": "48696e41-5aaa-41d8-cb3a-ae6990e39fce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['.config', 'sample_data']\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "import os\n",
        "print(os.listdir())\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv(\"/content/heart.csv\")"
      ],
      "metadata": {
        "id": "GtcExXeTIoJz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "type(dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "cSPciZ_RIxkC",
        "outputId": "d5fed2d6-7519-4219-865d-f4c145411303"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
              "\n",
              "Data structure also contains labeled axes (rows and columns).\n",
              "Arithmetic operations align on both row and column labels. Can be\n",
              "thought of as a dict-like container for Series objects. The primary\n",
              "pandas data structure.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n",
              "    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n",
              "    data is a dict, column order follows insertion-order. If a dict contains Series\n",
              "    which have an index defined, it is aligned by its index. This alignment also\n",
              "    occurs if data is a Series or a DataFrame itself. Alignment is done on\n",
              "    Series/DataFrame inputs.\n",
              "\n",
              "    If data is a list of dicts, column order follows insertion-order.\n",
              "\n",
              "index : Index or array-like\n",
              "    Index to use for resulting frame. Will default to RangeIndex if\n",
              "    no indexing information part of input data and no index provided.\n",
              "columns : Index or array-like\n",
              "    Column labels to use for resulting frame when data does not have them,\n",
              "    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n",
              "    will perform column selection instead.\n",
              "dtype : dtype, default None\n",
              "    Data type to force. Only a single dtype is allowed. If None, infer.\n",
              "copy : bool or None, default None\n",
              "    Copy data from inputs.\n",
              "    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n",
              "    or 2d ndarray input, the default of None behaves like ``copy=False``.\n",
              "    If data is a dict containing one or more Series (possibly of different dtypes),\n",
              "    ``copy=False`` will ensure that these inputs are not copied.\n",
              "\n",
              "    .. versionchanged:: 1.3.0\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.from_records : Constructor from tuples, also record arrays.\n",
              "DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n",
              "read_csv : Read a comma-separated values (csv) file into DataFrame.\n",
              "read_table : Read general delimited file into DataFrame.\n",
              "read_clipboard : Read text from clipboard into DataFrame.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing DataFrame from a dictionary.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d)\n",
              "&gt;&gt;&gt; df\n",
              "   col1  col2\n",
              "0     1     3\n",
              "1     2     4\n",
              "\n",
              "Notice that the inferred dtype is int64.\n",
              "\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int64\n",
              "col2    int64\n",
              "dtype: object\n",
              "\n",
              "To enforce a single dtype:\n",
              "\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int8\n",
              "col2    int8\n",
              "dtype: object\n",
              "\n",
              "Constructing DataFrame from a dictionary including Series:\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n",
              "&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n",
              "   col1  col2\n",
              "0     0   NaN\n",
              "1     1   NaN\n",
              "2     2   2.0\n",
              "3     3   3.0\n",
              "\n",
              "Constructing DataFrame from numpy ndarray:\n",
              "\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n",
              "...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; df2\n",
              "   a  b  c\n",
              "0  1  2  3\n",
              "1  4  5  6\n",
              "2  7  8  9\n",
              "\n",
              "Constructing DataFrame from a numpy ndarray that has labeled columns:\n",
              "\n",
              "&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n",
              "...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n",
              "&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n",
              "...\n",
              "&gt;&gt;&gt; df3\n",
              "   c  a\n",
              "0  3  1\n",
              "1  6  4\n",
              "2  9  7\n",
              "\n",
              "Constructing DataFrame from dataclass:\n",
              "\n",
              "&gt;&gt;&gt; from dataclasses import make_dataclass\n",
              "&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n",
              "&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n",
              "   x  y\n",
              "0  0  0\n",
              "1  0  3\n",
              "2  2  3\n",
              "\n",
              "Constructing DataFrame from Series/DataFrame:\n",
              "\n",
              "&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df\n",
              "   0\n",
              "a  1\n",
              "c  3\n",
              "\n",
              "&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df2\n",
              "   x\n",
              "a  1\n",
              "c  3</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 490);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0RDwxBV0I1Ci",
        "outputId": "d28039ef-f2fc-4ee9-9a13-bac7122e23bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(514, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "csRWMWPBI5an",
        "outputId": "2c0610f9-0101-4195-e2ff-b6c393a16219"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
              "0   40    1   3       145   233    1        0      150      0      2.3      0   \n",
              "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
              "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
              "3   50    1   1       120   236    0        1      178      0      0.8      2   \n",
              "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
              "\n",
              "   ca  thal  target  \n",
              "0   0     1       1  \n",
              "1   0     2       1  \n",
              "2   0     2       1  \n",
              "3   0     2       1  \n",
              "4   0     2       1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-392690bb-f88b-47af-b44e-cfbab4745666\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>145</td>\n",
              "      <td>233</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>0</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>130</td>\n",
              "      <td>250</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>187</td>\n",
              "      <td>0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>204</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>236</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>178</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>354</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>163</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-392690bb-f88b-47af-b44e-cfbab4745666')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-392690bb-f88b-47af-b44e-cfbab4745666 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-392690bb-f88b-47af-b44e-cfbab4745666');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c05758ed-6ee0-4fec-a421-c60fcf438672\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c05758ed-6ee0-4fec-a421-c60fcf438672')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c05758ed-6ee0-4fec-a421-c60fcf438672 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 514,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 5,\n        \"max\": 93,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          31,\n          39,\n          57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          104,\n          117\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53,\n        \"min\": 104,\n        \"max\": 564,\n        \"num_unique_values\": 155,\n        \"samples\": [\n          195,\n          237\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          159,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.173418693899852,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          1.9,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "-9oMsy2eI-VQ",
        "outputId": "30052312-4a2e-4e79-f5cd-8310c4b10871"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
              "137   62    1   1       128   208    1        0      140      0      0.0   \n",
              "438   51    1   3       125   213    0        0      125      1      1.4   \n",
              "39    65    0   2       160   360    0        0      151      0      0.8   \n",
              "3     50    1   1       120   236    0        1      178      0      0.8   \n",
              "355   45    1   0       142   309    0        0      147      1      0.0   \n",
              "\n",
              "     slope  ca  thal  target  \n",
              "137      2   0     2       1  \n",
              "438      2   1     2       1  \n",
              "39       2   0     2       1  \n",
              "3        2   0     2       1  \n",
              "355      1   3     3       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a60f909-ff09-42f0-bf11-69b40a728088\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>62</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>128</td>\n",
              "      <td>208</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>438</th>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>125</td>\n",
              "      <td>213</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>1</td>\n",
              "      <td>1.4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>160</td>\n",
              "      <td>360</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>236</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>178</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>355</th>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>142</td>\n",
              "      <td>309</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>147</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a60f909-ff09-42f0-bf11-69b40a728088')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8a60f909-ff09-42f0-bf11-69b40a728088 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8a60f909-ff09-42f0-bf11-69b40a728088');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fb7ec2f-d782-4155-9d35-9efbd2504545\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fb7ec2f-d782-4155-9d35-9efbd2504545')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fb7ec2f-d782-4155-9d35-9efbd2504545 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 45,\n        \"max\": 65,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          51,\n          45,\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 120,\n        \"max\": 160,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          125,\n          142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 66,\n        \"min\": 208,\n        \"max\": 360,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          213,\n          309\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 125,\n        \"max\": 178,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          125,\n          147\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6,\n        \"min\": 0.0,\n        \"max\": 1.4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          1.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "6gBDfaecJBwb",
        "outputId": "0a65bea5-55ee-42f9-c45c-2f203e982e9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              age         sex          cp    trestbps        chol         fbs  \\\n",
              "count  514.000000  514.000000  514.000000  514.000000  514.000000  514.000000   \n",
              "mean    52.418288    0.686770    0.974708  132.173152  246.618677    0.163424   \n",
              "std     13.101275    0.464259    1.043565   17.792479   53.334891    0.370112   \n",
              "min      5.000000    0.000000    0.000000   94.000000  104.000000    0.000000   \n",
              "25%     45.000000    0.000000    0.000000  120.000000  211.000000    0.000000   \n",
              "50%     54.000000    1.000000    1.000000  130.000000  241.000000    0.000000   \n",
              "75%     60.000000    1.000000    2.000000  140.000000  275.000000    0.000000   \n",
              "max     93.000000    1.000000    3.000000  200.000000  564.000000    1.000000   \n",
              "\n",
              "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
              "count  514.000000  514.000000  514.000000  514.000000  514.000000  514.000000   \n",
              "mean     0.521401  149.289883    0.334630    1.064591    1.391051    0.747082   \n",
              "std      0.526611   23.363381    0.472321    1.173419    0.618744    1.023239   \n",
              "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
              "25%      0.000000  132.250000    0.000000    0.000000    1.000000    0.000000   \n",
              "50%      1.000000  152.000000    0.000000    0.800000    1.000000    0.000000   \n",
              "75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
              "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
              "\n",
              "             thal      target  \n",
              "count  514.000000  514.000000  \n",
              "mean     2.307393    0.538911  \n",
              "std      0.623503    0.498969  \n",
              "min      0.000000    0.000000  \n",
              "25%      2.000000    0.000000  \n",
              "50%      2.000000    1.000000  \n",
              "75%      3.000000    1.000000  \n",
              "max      3.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07b719a0-0565-40bb-9d96-d3fea56b3018\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>514.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>52.418288</td>\n",
              "      <td>0.686770</td>\n",
              "      <td>0.974708</td>\n",
              "      <td>132.173152</td>\n",
              "      <td>246.618677</td>\n",
              "      <td>0.163424</td>\n",
              "      <td>0.521401</td>\n",
              "      <td>149.289883</td>\n",
              "      <td>0.334630</td>\n",
              "      <td>1.064591</td>\n",
              "      <td>1.391051</td>\n",
              "      <td>0.747082</td>\n",
              "      <td>2.307393</td>\n",
              "      <td>0.538911</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>13.101275</td>\n",
              "      <td>0.464259</td>\n",
              "      <td>1.043565</td>\n",
              "      <td>17.792479</td>\n",
              "      <td>53.334891</td>\n",
              "      <td>0.370112</td>\n",
              "      <td>0.526611</td>\n",
              "      <td>23.363381</td>\n",
              "      <td>0.472321</td>\n",
              "      <td>1.173419</td>\n",
              "      <td>0.618744</td>\n",
              "      <td>1.023239</td>\n",
              "      <td>0.623503</td>\n",
              "      <td>0.498969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>45.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>211.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>132.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>54.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>241.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>152.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>275.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>93.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>564.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07b719a0-0565-40bb-9d96-d3fea56b3018')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-07b719a0-0565-40bb-9d96-d3fea56b3018 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-07b719a0-0565-40bb-9d96-d3fea56b3018');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2b0fc93b-6511-46e7-9080-d915cf978fdd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b0fc93b-6511-46e7-9080-d915cf978fdd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2b0fc93b-6511-46e7-9080-d915cf978fdd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 167.6985807559959,\n        \"min\": 5.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52.41828793774319,\n          54.0,\n          514.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.5172664226177,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6867704280155642,\n          1.0,\n          0.4642586975244587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.3241589792338,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          514.0,\n          0.9747081712062257,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 148.6087368728732,\n        \"min\": 17.792478725823884,\n        \"max\": 514.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          132.17315175097275,\n          130.0,\n          514.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 179.3105442873182,\n        \"min\": 53.33489143740835,\n        \"max\": 564.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          246.61867704280155,\n          241.0,\n          514.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.64931295580072,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.16342412451361868,\n          1.0,\n          0.37011239413206326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.47262461498033,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          514.0,\n          0.5214007782101168,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147.62209351407984,\n        \"min\": 23.363381128683514,\n        \"max\": 514.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          149.2898832684825,\n          152.0,\n          514.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.58514609441943,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3346303501945525,\n          1.0,\n          0.4723207597911632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.18983066553687,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          514.0,\n          1.0645914396887157,\n          1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.32312897281273,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          514.0,\n          1.3910505836575875,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.38923784348762,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          514.0,\n          0.7470817120622568,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.07642098495535,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          514.0,\n          2.307392996108949,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.5229752409106,\n        \"min\": 0.0,\n        \"max\": 514.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5389105058365758,\n          1.0,\n          0.4989692882830027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7B54Uj0GJErv",
        "outputId": "d3f545c0-40c6-425a-d001-c38efd2b23ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 514 entries, 0 to 513\n",
            "Data columns (total 14 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       514 non-null    int64  \n",
            " 1   sex       514 non-null    int64  \n",
            " 2   cp        514 non-null    int64  \n",
            " 3   trestbps  514 non-null    int64  \n",
            " 4   chol      514 non-null    int64  \n",
            " 5   fbs       514 non-null    int64  \n",
            " 6   restecg   514 non-null    int64  \n",
            " 7   thalach   514 non-null    int64  \n",
            " 8   exang     514 non-null    int64  \n",
            " 9   oldpeak   514 non-null    float64\n",
            " 10  slope     514 non-null    int64  \n",
            " 11  ca        514 non-null    int64  \n",
            " 12  thal      514 non-null    int64  \n",
            " 13  target    514 non-null    int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 56.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###Luckily, we have no missing values"
      ],
      "metadata": {
        "id": "Ki_U8Z-aJIKT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "info = [\"age\",\"1: male, 0: female\",\"chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic\",\"resting blood pressure\",\" serum cholestoral in mg/dl\",\"fasting blood sugar > 120 mg/dl\",\"resting electrocardiographic results (values 0,1,2)\",\" maximum heart rate achieved\",\"exercise induced angina\",\"oldpeak = ST depression induced by exercise relative to rest\",\"the slope of the peak exercise ST segment\",\"number of major vessels (0-3) colored by flourosopy\",\"thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\"]\n",
        "\n",
        "\n",
        "\n",
        "for i in range(len(info)):\n",
        "    print(dataset.columns[i]+\":\\t\\t\\t\"+info[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YKuFT32gJNy8",
        "outputId": "2b24baec-e788-4ce7-cc8e-98770baa784f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age:\t\t\tage\n",
            "sex:\t\t\t1: male, 0: female\n",
            "cp:\t\t\tchest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic\n",
            "trestbps:\t\t\tresting blood pressure\n",
            "chol:\t\t\t serum cholestoral in mg/dl\n",
            "fbs:\t\t\tfasting blood sugar > 120 mg/dl\n",
            "restecg:\t\t\tresting electrocardiographic results (values 0,1,2)\n",
            "thalach:\t\t\t maximum heart rate achieved\n",
            "exang:\t\t\texercise induced angina\n",
            "oldpeak:\t\t\toldpeak = ST depression induced by exercise relative to rest\n",
            "slope:\t\t\tthe slope of the peak exercise ST segment\n",
            "ca:\t\t\tnumber of major vessels (0-3) colored by flourosopy\n",
            "thal:\t\t\tthal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"target\"].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wBnpBpQJUYC",
        "outputId": "114e7458-ecf8-4651-d2a5-fa925703d8cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    514.000000\n",
              "mean       0.538911\n",
              "std        0.498969\n",
              "min        0.000000\n",
              "25%        0.000000\n",
              "50%        1.000000\n",
              "75%        1.000000\n",
              "max        1.000000\n",
              "Name: target, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"target\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GJeUHwCdJXR2",
        "outputId": "de0f3ccd-8ffd-4cb6-b45b-f9a13bb5be45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(dataset.corr()[\"target\"].abs().sort_values(ascending=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YkqoOI51JeI_",
        "outputId": "62ba25d0-fefc-4503-d9ce-e163f35e8368"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "target      1.000000\n",
            "thalach     0.446914\n",
            "cp          0.441767\n",
            "exang       0.411021\n",
            "ca          0.404481\n",
            "oldpeak     0.385175\n",
            "slope       0.332610\n",
            "thal        0.301680\n",
            "age         0.259983\n",
            "sex         0.237598\n",
            "trestbps    0.139858\n",
            "restecg     0.108103\n",
            "chol        0.049983\n",
            "fbs         0.013389\n",
            "Name: target, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#This shows that most columns are moderately correlated with target, but 'fbs' is very weakly correlated."
      ],
      "metadata": {
        "id": "Wd9FXt8dJh-9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = dataset[\"target\"]\n",
        "\n",
        "sns.countplot(y)\n",
        "\n",
        "\n",
        "target_temp = dataset.target.value_counts()\n",
        "\n",
        "print(target_temp)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "5bhcZYhLJy_y",
        "outputId": "884ab28b-f23b-40ce-8100-73c16180381d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "target\n",
            "1    277\n",
            "0    237\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Percentage of patience without heart problems: \"+str(round(target_temp[0]*100/303,2)))\n",
        "print(\"Percentage of patience with heart problems: \"+str(round(target_temp[1]*100/303,2)))\n",
        "\n",
        "#Alternatively,\n",
        "# print(\"Percentage of patience with heart problems: \"+str(y.where(y==1).count()*100/303))\n",
        "# print(\"Percentage of patience with heart problems: \"+str(y.where(y==0).count()*100/303))\n",
        "\n",
        "# #Or,\n",
        "# countNoDisease = len(df[df.target == 0])\n",
        "# countHaveDisease = len(df[df.target == 1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CmwFoT7BJ6nh",
        "outputId": "33d4e451-e5de-4d5f-bce5-c8c7db39ba22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percentage of patience without heart problems: 78.22\n",
            "Percentage of patience with heart problems: 91.42\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"sex\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZhDILkeYKARD",
        "outputId": "77cde76b-54c9-4c64-b915-283a725a850c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "EvtFzIhqKUJO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "data = dataset[\"sex\"]\n",
        "y = None  # Replace with the desired y-axis variable"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "KBv2DaJIKUkx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "sns.barplot(x=data, y=y)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "-6uYvQ6fKVP3",
        "outputId": "039fc08d-0ede-4de3-8548-2c771a1f0457"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='sex'>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUI0lEQVR4nO3dfWzV9fnw8asUWgy0xc3wtHUoMw6yYSQYCKDDJUw2ycbClk2XORb39Aduc8ZENx+IjxDBScbcwhDRzE0yiYl7MAxHZIvoJFPID2llA13ECWSaKeCSIu3n98duess9nddpzzkF7tcrOX9w+u33e50rx/Ztz2naUEopAQCQMGigBwAAThzCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApA2u9gl7enri5ZdfjpaWlmhoaKj26QGAGiilxMGDB2Ps2LExaNA7/1yh6uHw8ssvR3t7e7VPCwDUwZ49e+L973//O3686uHQ0tLSe+HW1tZqnx4AqIEDBw5Ee3t77/fxd1L1cDj68kRra6twAIATzLu9zcCbIwGANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApA2u1Yk/et0D0dh8Sq1ODwDHlaeXfnmgR6gLP3EAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANIGD/QAAFAzpURD95t1udShQ4fqcp2IiGHDhkVDQ0PdrvdW/Q6Hrq6u6Orq6v33gQMH+ntKAKiKhu43o+1/HqjLtebNq891IiIefvjhGD58eN2u91b9fqli8eLF0dbW1ntrb2+vxlwAwHGo3+Hwve99L15//fXe2549e6oxFwBwHOr3SxXNzc3R3NxcjVkAoKpK45B4/exL6nKtTTdfXJfrRPz7PQ4DxZsjATh5NTREGdxUl0sN1HsO6s2vYwIAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBtcK1O/MdbLonW1tZanR4AGAB+4gAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpg6t9wlJKREQcOHCg2qcGAGrk6Pfto9/H30nVw+HVV1+NiIj29vZqnxoAqLGDBw9GW1vbO3686uHwnve8JyIiXnzxxf964ZPZgQMHor29Pfbs2ROtra0DPc6AsAM7iLCDCDs4yh6O/x2UUuLgwYMxduzY/3pc1cNh0KB/v22ira3tuFxMPbW2ttqBHdhB2EGEHRxlD8f3DjL/w+/NkQBAmnAAANKqHg7Nzc2xaNGiaG5urvapTxh2YAcRdhBhBxF2cJQ9nDw7aCjv9nsXAAD/h5cqAIA04QAApAkHACBNOAAAaX0Kh7vuuitOP/30GDp0aEybNi22bNnyX49/8MEHY8KECTF06NCYNGlSPPLII30a9nhSyQ527NgRn/3sZ+P000+PhoaGWL58ef0GraFKdrBq1ao4//zz49RTT41TTz01Zs+e/a7PmxNBJTt46KGH4txzz40RI0bEsGHD4pxzzomf/exndZy2Nir9enDU2rVro6GhIT7zmc/UdsA6qGQH9957bzQ0NBxzGzp0aB2nrY1KnwevvfZaLFy4MMaMGRPNzc1x1lln/X/3veGCCy74j+dCQ0NDzJ07t44T90Gp0Nq1a0tTU1O55557yo4dO8rXv/71MmLEiLJ///63PX7z5s2lsbGx3H777aWjo6Nc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wgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw5ARESsW7cuJk2aFKecckq8973vjdmzZ8cbb7wRERF33313TJw4MYYOHRoTJkyIH//4x72fd9lll8XZZ5/d++fBDx8+HJMnT44vf/nLA/I4gNoSDkDs3bs3Lrnkkrjsssuis7MzNm3aFPPnz49SSvz85z+PG264IW699dbo7OyM2267La6//vq47777IiLihz/8YbzxxhtxzTXXRETEtddeG6+99lr86Ec/GsiHBNTI4IEeABh4e/fujSNHjsT8+fNj3LhxERExadKkiIhYtGhR3HHHHTF//vyIiDjjjDOio6MjVq5cGQsWLIjhw4fH/fffH7NmzYqWlpZYvnx5PPbYY9Ha2jpgjweoHX9WG4ju7u6YM2dObNmyJebMmRMXXnhhfO5zn4umpqYYPnx4nHLKKTFo0P/9AeWRI0eira0t9u/f33vf97///Vi8eHFcffXVsWTJkoF4GEAd+IkDEI2NjfHoo4/GE088ERs2bIgVK1bEtddeG7/+9a8jImLVqlUxbdq0//ico3p6emLz5s3R2NgYu3btquvsQH15jwMQERENDQ0xc+bMuPHGG2Pr1q3R1NQUmzdvjrFjx8bzzz8fZ5555jG3M844o/dzly5dGs8991z84Q9/iPXr18eaNWsG8JEAteQnDkA89dRTsXHjxrjwwgtj5MiR8dRTT8U//vGPmDhxYtx4443x7W9/O9ra2uITn/hEdHV1xZ///Of45z//GVdeeWVs3bo1brjhhli3bl3MnDkzfvCDH8R3vvOdmDVrVowfP36gHxpQZd7jAERnZ2d897vfjWeeeSYOHDgQ48aNi29961tx+eWXR0TEL37xi1i6dGl0dHTEsGHDYtKkSXHFFVfEJz/5yZgyZUqcd955sXLlyt7zzZs3L1555ZX44x//eMxLGsCJTzgAAGne4wAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABp/wteJSiky1nfwwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"cp\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kV3AU5EtKZUZ",
        "outputId": "d84062e1-ed68-4a19-90d8-01fe7bc378e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3, 2, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "_1JETpzLKkbt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "help(sns.barplot)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gnOG7aJ-KkuI",
        "outputId": "303292ac-aa0c-45dd-d2ac-4c05ff7443a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function barplot in module seaborn.categorical:\n",
            "\n",
            "barplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, units=None, weights=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ci=<deprecated>, errcolor=<deprecated>, errwidth=<deprecated>, ax=None, **kwargs)\n",
            "    Show point estimates and errors as rectangular bars.\n",
            "    \n",
            "    A bar plot represents an aggregate or statistical estimate for a numeric\n",
            "    variable with the height of each rectangle and indicates the uncertainty\n",
            "    around that estimate using an error bar. Bar plots include 0 in the\n",
            "    axis range, and they are a good choice when 0 is a meaningful value\n",
            "    for the variable to take.\n",
            "    \n",
            "    See the :ref:`tutorial <categorical_tutorial>` for more information.\n",
            "    \n",
            "    .. note::\n",
            "        By default, this function treats one of the variables as categorical\n",
            "        and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n",
            "        As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n",
            "    \n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    data : DataFrame, Series, dict, array, or list of arrays\n",
            "        Dataset for plotting. If `x` and `y` are absent, this is\n",
            "        interpreted as wide-form. Otherwise it is expected to be long-form.    \n",
            "    x, y, hue : names of variables in `data` or vector data\n",
            "        Inputs for plotting long-form data. See examples for interpretation.    \n",
            "    order, hue_order : lists of strings\n",
            "        Order to plot the categorical levels in; otherwise the levels are\n",
            "        inferred from the data objects.    \n",
            "    estimator : string or callable that maps vector -> scalar\n",
            "        Statistical function to estimate within each categorical bin.\n",
            "    errorbar : string, (string, number) tuple, callable or None\n",
            "        Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n",
            "        with a method name and a level parameter, or a function that maps from a\n",
            "        vector to a (min, max) interval, or None to hide errorbar. See the\n",
            "        :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n",
            "    \n",
            "        .. versionadded:: v0.12.0\n",
            "    n_boot : int\n",
            "        Number of bootstrap samples used to compute confidence intervals.\n",
            "    seed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n",
            "        Seed or random number generator for reproducible bootstrapping.\n",
            "    units : name of variable in `data` or vector data\n",
            "        Identifier of sampling units; used by the errorbar function to\n",
            "        perform a multilevel bootstrap and account for repeated measures\n",
            "    weights : name of variable in `data` or vector data\n",
            "        Data values or column used to compute weighted statistics.\n",
            "        Note that the use of weights may limit other statistical options.\n",
            "    \n",
            "        .. versionadded:: v0.13.1    \n",
            "    orient : \"v\" | \"h\" | \"x\" | \"y\"\n",
            "        Orientation of the plot (vertical or horizontal). This is usually\n",
            "        inferred based on the type of the input variables, but it can be used\n",
            "        to resolve ambiguity when both `x` and `y` are numeric or when\n",
            "        plotting wide-form data.\n",
            "    \n",
            "        .. versionchanged:: v0.13.0\n",
            "            Added 'x'/'y' as options, equivalent to 'v'/'h'.    \n",
            "    color : matplotlib color\n",
            "        Single color for the elements in the plot.    \n",
            "    palette : palette name, list, or dict\n",
            "        Colors to use for the different levels of the ``hue`` variable. Should\n",
            "        be something that can be interpreted by :func:`color_palette`, or a\n",
            "        dictionary mapping hue levels to matplotlib colors.    \n",
            "    saturation : float\n",
            "        Proportion of the original saturation to draw fill colors in. Large\n",
            "        patches often look better with desaturated colors, but set this to\n",
            "        `1` if you want the colors to perfectly match the input values.    \n",
            "    fill : bool\n",
            "        If True, use a solid patch. Otherwise, draw as line art.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    hue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n",
            "        Normalization in data units for colormap applied to the `hue`\n",
            "        variable when it is numeric. Not relevant if `hue` is categorical.\n",
            "    \n",
            "        .. versionadded:: v0.12.0    \n",
            "    width : float\n",
            "        Width allotted to each element on the orient axis. When `native_scale=True`,\n",
            "        it is relative to the minimum distance between two values in the native scale.    \n",
            "    dodge : \"auto\" or bool\n",
            "        When hue mapping is used, whether elements should be narrowed and shifted along\n",
            "        the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n",
            "        orient variable is crossed with the categorical variable or `False` otherwise.\n",
            "    \n",
            "        .. versionchanged:: 0.13.0\n",
            "    \n",
            "            Added `\"auto\"` mode as a new default.    \n",
            "    gap : float\n",
            "        Shrink on the orient axis by this factor to add a gap between dodged elements.\n",
            "    \n",
            "        .. versionadded:: 0.13.0    \n",
            "    log_scale : bool or number, or pair of bools or numbers\n",
            "        Set axis scale(s) to log. A single value sets the data axis for any numeric\n",
            "        axes in the plot. A pair of values sets each axis independently.\n",
            "        Numeric values are interpreted as the desired base (default 10).\n",
            "        When `None` or `False`, seaborn defers to the existing Axes scale.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    native_scale : bool\n",
            "        When True, numeric or datetime values on the categorical axis will maintain\n",
            "        their original scaling rather than being converted to fixed indices.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    formatter : callable\n",
            "        Function for converting categorical data into strings. Affects both grouping\n",
            "        and tick labels.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    legend : \"auto\", \"brief\", \"full\", or False\n",
            "        How to draw the legend. If \"brief\", numeric `hue` and `size`\n",
            "        variables will be represented with a sample of evenly spaced values.\n",
            "        If \"full\", every group will get an entry in the legend. If \"auto\",\n",
            "        choose between brief or full representation based on number of levels.\n",
            "        If `False`, no legend data is added and no legend is drawn.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    capsize : float\n",
            "        Width of the \"caps\" on error bars, relative to bar spacing.    \n",
            "    err_kws : dict\n",
            "        Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    ci : float\n",
            "        Level of the confidence interval to show, in [0, 100].\n",
            "    \n",
            "        .. deprecated:: v0.12.0\n",
            "            Use `errorbar=(\"ci\", ...)`.    \n",
            "    errcolor : matplotlib color\n",
            "        Color used for the error bar lines.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'color': ...}`.    \n",
            "    errwidth : float\n",
            "        Thickness of error bar lines (and caps), in points.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'linewidth': ...}`.    \n",
            "    ax : matplotlib Axes\n",
            "        Axes object to draw the plot onto, otherwise uses the current Axes.    \n",
            "    kwargs : key, value mappings\n",
            "        Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    ax : matplotlib Axes\n",
            "        Returns the Axes object with the plot drawn onto it.    \n",
            "    \n",
            "    See Also\n",
            "    --------\n",
            "    countplot : Show the counts of observations in each categorical bin.    \n",
            "    pointplot : Show point estimates and confidence intervals using dots.    \n",
            "    catplot : Combine a categorical plot with a :class:`FacetGrid`.    \n",
            "    \n",
            "    Notes\n",
            "    -----\n",
            "    \n",
            "    For datasets where 0 is not a meaningful value, a :func:`pointplot` will\n",
            "    allow you to focus on differences between levels of one or more categorical\n",
            "    variables.\n",
            "    \n",
            "    It is also important to keep in mind that a bar plot shows only the mean (or\n",
            "    other aggregate) value, but it is often more informative to show the\n",
            "    distribution of values at each level of the categorical variables. In those\n",
            "    cases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\n",
            "    more appropriate.\n",
            "    \n",
            "    Examples\n",
            "    --------\n",
            "    .. include:: ../docstrings/barplot.rst\n",
            "\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "8GQnkKAtLAei"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "sns.barplot(x=\"cp\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "j24hZh4xLAqX",
        "outputId": "67360eb8-394a-4235-ff31-7fe4bb0233e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='cp'>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAASFElEQVR4nO3dbWzdddnA8atr19OJ7cDMjVaLsg1k4SFEFpZuchN1CQlm4iu4xeyeUUTC9AUYNnDMGsdDs5uoCU6NiOILpFEDSmTBh+kkIMRktrkJqxjcJjNzixCkVXRb19/9QtdY9sB1uvactft8kibbOf/zP9euNTvfnYe0oZRSAgAgYUa9BwAApg7hAACkCQcAIE04AABpwgEASBMOAECacAAA0pom+oQjIyOxZ8+eaG1tjYaGhok+PQAwCUopMTQ0FB0dHTFjxrGfV5jwcNizZ090dnZO9GkBgBrYvXt3vP3tbz/m9RMeDq2traN33NbWNtGnBwAmweDgYHR2do4+jh/LhIfD4Zcn2trahAMATDFv9DYDb44EANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJDWNFkn/q/bH4rGyqzJOj0ATLht//s/9R7hpOcZBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgraneAwBwiiglGg4drPcUx/W3v/2t3iOknHbaadHQ0FCX+z7hcNi/f3/s379/9PeDg4MnekoApqGGQwdj9v89VO8xjuuqq07u+Q770Y9+FG9+85vrct8n/FLF3XffHbNnzx796uzsnIi5AICT0AmHw2233Ravvvrq6Nfu3bsnYi4A4CR0wi9VVCqVqFQqEzELANNYaZwZr1704XqPcVxbN/x3vUdIOe200+p2394cCUBtNDREaWqu9xTHVa/3DUwlPo4JAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACAtKbJOvETd3w42traJuv0AEAdeMYBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0pom+oSllIiIGBwcnOhTAwCT5PDj9uHH8WOZ8HB4+eWXIyKis7Nzok8NAEyyoaGhmD179jGvn/BweMtb3hIRES+++OJx75jxGxwcjM7Ozti9e3e0tbXVe5xpx34nnx1PLvudfNNxx6WUGBoaio6OjuMeN+HhMGPGv942MXv27GmzzJNVW1ubHU8i+518djy57HfyTbcdZ/7D782RAECacAAA0iY8HCqVSnR3d0elUpnoU/Nvdjy57Hfy2fHkst/JdyrvuKG80ecuAAD+zUsVAECacAAA0oQDAJAmHACAtHGFw6ZNm+Kd73xntLS0xJIlS+I3v/nNcY///ve/H+edd160tLTEhRdeGJs3bx7XsKeKavZ73333xWWXXRZnnHFGnHHGGbF8+fI3/Pug+u/hw3p7e6OhoSE+9KEPTe6A00C1O/7rX/8aq1evjvb29qhUKnHuuef6t+I4qt3vl7/85XjXu94Vs2bNis7Ozrjpppvin//8Z42mnXqeeOKJWLFiRXR0dERDQ0P88Ic/fMPbbN26Nd797ndHpVKJhQsXxgMPPDDpc9ZFqVJvb29pbm4u3/rWt8pzzz1XPvGJT5TTTz+97Nu376jHP/XUU6WxsbFs3LixbN++vdx+++1l5syZ5dlnn632rk8J1e732muvLZs2bSp9fX1lYGCgfPSjHy2zZ88uf/rTn2o8+dRR7Y4P27lzZ3nb295WLrvssnLVVVfVZtgpqtod79+/vyxevLhceeWV5cknnyw7d+4sW7duLf39/TWefGqodr8PPvhgqVQq5cEHHyw7d+4sP/nJT0p7e3u56aabajz51LF58+aybt268vDDD5eIKI888shxj9+xY0d505veVG6++eayffv2cu+995bGxsby+OOP12bgGqo6HC699NKyevXq0d8fOnSodHR0lLvvvvuox1999dXlAx/4wJjLlixZUj75yU9We9enhGr3+3rDw8OltbW1fOc735msEae88ex4eHi4LF26tHzzm98sq1atEg5voNodf+1rXyvz588vBw4cqNWIU1q1+129enV53/veN+aym2++uSxbtmxS55wuMuGwZs2acv7554+57JprrilXXHHFJE5WH1W9VHHgwIHYtm1bLF++fPSyGTNmxPLly+Ppp58+6m2efvrpMcdHRFxxxRXHPP5UNp79vt5rr70WBw8eHP1hY4w13h1/4QtfiLlz58bHP/7xWow5pY1nx48++mh0dXXF6tWrY968eXHBBRfEXXfdFYcOHarV2FPGePa7dOnS2LZt2+jLGTt27IjNmzfHlVdeWZOZTwWn0mNdVT/k6qWXXopDhw7FvHnzxlw+b968+N3vfnfU2+zdu/eox+/du7fKUae/8ez39dauXRsdHR1HfAPzL+PZ8ZNPPhn3339/9Pf312DCqW88O96xY0f84he/iI985COxefPmeOGFF+LGG2+MgwcPRnd3dy3GnjLGs99rr702XnrppXjPe94TpZQYHh6OG264IT772c/WYuRTwrEe6wYHB+Mf//hHzJo1q06TTTyfqphGenp6ore3Nx555JFoaWmp9zjTwtDQUKxcuTLuu+++mDNnTr3HmbZGRkZi7ty58Y1vfCMuueSSuOaaa2LdunXx9a9/vd6jTQtbt26Nu+66K7761a/Gb3/723j44Yfjscceiw0bNtR7NKagqp5xmDNnTjQ2Nsa+ffvGXL5v374488wzj3qbM888s6rjT2Xj2e9h99xzT/T09MTPf/7zuOiiiyZzzCmt2h3/4Q9/iF27dsWKFStGLxsZGYmIiKampnj++edjwYIFkzv0FDOe7+P29vaYOXNmNDY2jl62aNGi2Lt3bxw4cCCam5sndeapZDz7Xb9+faxcuTKuu+66iIi48MIL4+9//3tcf/31sW7dupgxw/8hT9SxHuva2tqm1bMNEVU+49Dc3ByXXHJJbNmyZfSykZGR2LJlS3R1dR31Nl1dXWOOj4j42c9+dszjT2Xj2W9ExMaNG2PDhg3x+OOPx+LFi2sx6pRV7Y7PO++8ePbZZ6O/v3/064Mf/GC8973vjf7+/ujs7Kzl+FPCeL6Ply1bFi+88MJolEVE/P73v4/29nbR8Drj2e9rr712RBwcjrTixxVNiFPqsa7ad1P29vaWSqVSHnjggbJ9+/Zy/fXXl9NPP73s3bu3lFLKypUry6233jp6/FNPPVWamprKPffcUwYGBkp3d7ePYx5Htfvt6ekpzc3N5Qc/+EH585//PPo1NDRUrz/CSa/aHb+eT1W8sWp3/OKLL5bW1tbyqU99qjz//PPlxz/+cZk7d26544476vVHOKlVu9/u7u7S2tpaHnroobJjx47y05/+tCxYsKBcffXV9fojnPSGhoZKX19f6evrKxFRvvjFL5a+vr7yxz/+sZRSyq233lpWrlw5evzhj2PecsstZWBgoGzatMnHMf/TvffeW84666zS3NxcLr300vLMM8+MXnf55ZeXVatWjTn+e9/7Xjn33HNLc3NzOf/888tjjz12QkNPd9Xs9x3veEeJiCO+uru7az/4FFLt9/B/Eg451e7417/+dVmyZEmpVCpl/vz55c477yzDw8M1nnrqqGa/Bw8eLJ///OfLggULSktLS+ns7Cw33nhjeeWVV2o/+BTxy1/+8qj/th7e66pVq8rll19+xG0uvvji0tzcXObPn1++/e1v13zuWvBjtQGANO+IAQDShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThABxhZGQkNm7cGAsXLoxKpRJnnXVW3HnnnbFr165oaGiI3t7eWLp0abS0tMQFF1wQv/rVr+o9MlAjwgE4wm233RY9PT2xfv362L59e3z3u9+NefPmjV5/yy23xGc+85no6+uLrq6uWLFiRbz88st1nBioFT8dExhjaGgo3vrWt8ZXvvKVuO6668Zct2vXrjj77LOjp6cn1q5dGxERw8PDcfbZZ8enP/3pWLNmTT1GBmrIMw7AGAMDA7F///54//vff8xjurq6Rn/d1NQUixcvjoGBgVqMB9SZcADGmDVrVr1HAE5iwgEY45xzzolZs2bFli1bjnnMM888M/rr4eHh2LZtWyxatKgW4wF11lTvAYCTS0tLS6xduzbWrFkTzc3NsWzZsvjLX/4Szz333OjLF5s2bYpzzjknFi1aFF/60pfilVdeiY997GN1nhyoBeEAHGH9+vXR1NQUn/vc52LPnj3R3t4eN9xww+j1PT090dPTE/39/bFw4cJ49NFHY86cOXWcGKgVn6oA0g5/qqKvry8uvvjieo8D1IH3OAAAacIBAEjzUgUAkOYZBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApP0/vdW6C8501q4AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"fbs\"].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mmsFwjQJLHtl",
        "outputId": "6e02e737-4ed3-42be-8818-7c74ab106f17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    514.000000\n",
              "mean       0.163424\n",
              "std        0.370112\n",
              "min        0.000000\n",
              "25%        0.000000\n",
              "50%        0.000000\n",
              "75%        0.000000\n",
              "max        1.000000\n",
              "Name: fbs, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"fbs\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2dENKfDSLYBk",
        "outputId": "5657a552-f2b2-49d2-c845-34c16152a70e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "source": [
        "print(sns.barplot.__code__)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n8ZvtXrRLr-6",
        "outputId": "153604f2-088b-4e4c-f850-233b0d0120cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<code object barplot at 0x7c2b79af23f0, file \"/usr/local/lib/python3.10/dist-packages/seaborn/categorical.py\", line 2324>\n"
          ]
        }
      ]
    },
    {
      "source": [
        "sns.barplot(dataset[\"fbs\"])"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "PNDVTkL4Ltqm",
        "outputId": "bb7a1f52-7a5c-4a10-8ad4-c08e59ab1216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='fbs'>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"restecg\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6FwnpXvCLzGe",
        "outputId": "4c124805-b936-4b86-a54c-7ab41245c865"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "source": [
        "!pip install seaborn"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CHr9q2Q_L-0p",
        "outputId": "8adf5cb2-cbb7-4244-fb21-c98633b9881e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.25.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.0.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "QI3SrkePL_hs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "help(sns.barplot)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ge5d383QMAcV",
        "outputId": "52ec8e6d-7805-4780-8d40-057668eab3fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function barplot in module seaborn.categorical:\n",
            "\n",
            "barplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, units=None, weights=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ci=<deprecated>, errcolor=<deprecated>, errwidth=<deprecated>, ax=None, **kwargs)\n",
            "    Show point estimates and errors as rectangular bars.\n",
            "    \n",
            "    A bar plot represents an aggregate or statistical estimate for a numeric\n",
            "    variable with the height of each rectangle and indicates the uncertainty\n",
            "    around that estimate using an error bar. Bar plots include 0 in the\n",
            "    axis range, and they are a good choice when 0 is a meaningful value\n",
            "    for the variable to take.\n",
            "    \n",
            "    See the :ref:`tutorial <categorical_tutorial>` for more information.\n",
            "    \n",
            "    .. note::\n",
            "        By default, this function treats one of the variables as categorical\n",
            "        and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n",
            "        As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n",
            "    \n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    data : DataFrame, Series, dict, array, or list of arrays\n",
            "        Dataset for plotting. If `x` and `y` are absent, this is\n",
            "        interpreted as wide-form. Otherwise it is expected to be long-form.    \n",
            "    x, y, hue : names of variables in `data` or vector data\n",
            "        Inputs for plotting long-form data. See examples for interpretation.    \n",
            "    order, hue_order : lists of strings\n",
            "        Order to plot the categorical levels in; otherwise the levels are\n",
            "        inferred from the data objects.    \n",
            "    estimator : string or callable that maps vector -> scalar\n",
            "        Statistical function to estimate within each categorical bin.\n",
            "    errorbar : string, (string, number) tuple, callable or None\n",
            "        Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n",
            "        with a method name and a level parameter, or a function that maps from a\n",
            "        vector to a (min, max) interval, or None to hide errorbar. See the\n",
            "        :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n",
            "    \n",
            "        .. versionadded:: v0.12.0\n",
            "    n_boot : int\n",
            "        Number of bootstrap samples used to compute confidence intervals.\n",
            "    seed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n",
            "        Seed or random number generator for reproducible bootstrapping.\n",
            "    units : name of variable in `data` or vector data\n",
            "        Identifier of sampling units; used by the errorbar function to\n",
            "        perform a multilevel bootstrap and account for repeated measures\n",
            "    weights : name of variable in `data` or vector data\n",
            "        Data values or column used to compute weighted statistics.\n",
            "        Note that the use of weights may limit other statistical options.\n",
            "    \n",
            "        .. versionadded:: v0.13.1    \n",
            "    orient : \"v\" | \"h\" | \"x\" | \"y\"\n",
            "        Orientation of the plot (vertical or horizontal). This is usually\n",
            "        inferred based on the type of the input variables, but it can be used\n",
            "        to resolve ambiguity when both `x` and `y` are numeric or when\n",
            "        plotting wide-form data.\n",
            "    \n",
            "        .. versionchanged:: v0.13.0\n",
            "            Added 'x'/'y' as options, equivalent to 'v'/'h'.    \n",
            "    color : matplotlib color\n",
            "        Single color for the elements in the plot.    \n",
            "    palette : palette name, list, or dict\n",
            "        Colors to use for the different levels of the ``hue`` variable. Should\n",
            "        be something that can be interpreted by :func:`color_palette`, or a\n",
            "        dictionary mapping hue levels to matplotlib colors.    \n",
            "    saturation : float\n",
            "        Proportion of the original saturation to draw fill colors in. Large\n",
            "        patches often look better with desaturated colors, but set this to\n",
            "        `1` if you want the colors to perfectly match the input values.    \n",
            "    fill : bool\n",
            "        If True, use a solid patch. Otherwise, draw as line art.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    hue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n",
            "        Normalization in data units for colormap applied to the `hue`\n",
            "        variable when it is numeric. Not relevant if `hue` is categorical.\n",
            "    \n",
            "        .. versionadded:: v0.12.0    \n",
            "    width : float\n",
            "        Width allotted to each element on the orient axis. When `native_scale=True`,\n",
            "        it is relative to the minimum distance between two values in the native scale.    \n",
            "    dodge : \"auto\" or bool\n",
            "        When hue mapping is used, whether elements should be narrowed and shifted along\n",
            "        the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n",
            "        orient variable is crossed with the categorical variable or `False` otherwise.\n",
            "    \n",
            "        .. versionchanged:: 0.13.0\n",
            "    \n",
            "            Added `\"auto\"` mode as a new default.    \n",
            "    gap : float\n",
            "        Shrink on the orient axis by this factor to add a gap between dodged elements.\n",
            "    \n",
            "        .. versionadded:: 0.13.0    \n",
            "    log_scale : bool or number, or pair of bools or numbers\n",
            "        Set axis scale(s) to log. A single value sets the data axis for any numeric\n",
            "        axes in the plot. A pair of values sets each axis independently.\n",
            "        Numeric values are interpreted as the desired base (default 10).\n",
            "        When `None` or `False`, seaborn defers to the existing Axes scale.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    native_scale : bool\n",
            "        When True, numeric or datetime values on the categorical axis will maintain\n",
            "        their original scaling rather than being converted to fixed indices.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    formatter : callable\n",
            "        Function for converting categorical data into strings. Affects both grouping\n",
            "        and tick labels.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    legend : \"auto\", \"brief\", \"full\", or False\n",
            "        How to draw the legend. If \"brief\", numeric `hue` and `size`\n",
            "        variables will be represented with a sample of evenly spaced values.\n",
            "        If \"full\", every group will get an entry in the legend. If \"auto\",\n",
            "        choose between brief or full representation based on number of levels.\n",
            "        If `False`, no legend data is added and no legend is drawn.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    capsize : float\n",
            "        Width of the \"caps\" on error bars, relative to bar spacing.    \n",
            "    err_kws : dict\n",
            "        Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    ci : float\n",
            "        Level of the confidence interval to show, in [0, 100].\n",
            "    \n",
            "        .. deprecated:: v0.12.0\n",
            "            Use `errorbar=(\"ci\", ...)`.    \n",
            "    errcolor : matplotlib color\n",
            "        Color used for the error bar lines.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'color': ...}`.    \n",
            "    errwidth : float\n",
            "        Thickness of error bar lines (and caps), in points.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'linewidth': ...}`.    \n",
            "    ax : matplotlib Axes\n",
            "        Axes object to draw the plot onto, otherwise uses the current Axes.    \n",
            "    kwargs : key, value mappings\n",
            "        Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    ax : matplotlib Axes\n",
            "        Returns the Axes object with the plot drawn onto it.    \n",
            "    \n",
            "    See Also\n",
            "    --------\n",
            "    countplot : Show the counts of observations in each categorical bin.    \n",
            "    pointplot : Show point estimates and confidence intervals using dots.    \n",
            "    catplot : Combine a categorical plot with a :class:`FacetGrid`.    \n",
            "    \n",
            "    Notes\n",
            "    -----\n",
            "    \n",
            "    For datasets where 0 is not a meaningful value, a :func:`pointplot` will\n",
            "    allow you to focus on differences between levels of one or more categorical\n",
            "    variables.\n",
            "    \n",
            "    It is also important to keep in mind that a bar plot shows only the mean (or\n",
            "    other aggregate) value, but it is often more informative to show the\n",
            "    distribution of values at each level of the categorical variables. In those\n",
            "    cases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\n",
            "    more appropriate.\n",
            "    \n",
            "    Examples\n",
            "    --------\n",
            "    .. include:: ../docstrings/barplot.rst\n",
            "\n"
          ]
        }
      ]
    },
    {
      "source": [
        "sns.barplot(x=\"restecg\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "Ps69kx7WMApn",
        "outputId": "5f485960-af34-4b30-bdcc-607090fdcc62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='restecg'>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUgElEQVR4nO3df6zWdd348deB4zlHOT/AUH7UUQoSydEkTQdpWCL4I8NZY1nzxjLtD1y5xmYNNjS+E/ILi8WsFaUya7JyIG0VikymnswfiEpADBhMnEBZm0BNxMP7/uO+PZPbQ74uuM4PDo/Hdm2c63zO53pdL+Gcp+e6rl01pZQSAAAJ/Xp6AADgxCEcAIA04QAApAkHACBNOAAAacIBAEgTDgBAWm21T3j48OF4/fXXo6mpKWpqaqp9egCgC5RSYv/+/TF8+PDo1+/ov1eoeji8/vrr0draWu3TAgDdYNeuXfGRj3zkqJ+vejg0NTV13HBzc3O1Tw8AdIF9+/ZFa2trx8/xo6l6OLz78ERzc7NwAIATzAc9zcCTIwGANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApNV21Yk/O/uh6F9/aledHgC6xLr//189PUKv5jcOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAEBabU8PAMBJqJSoaT/U01N06sCBAz09wgcaMGBA1NTU9MhtH3c4HDx4MA4ePNjx8b59+473lAD0cTXth6LllYd6eoxOTZ3aO+d6r5UrV0ZjY2OP3PZxP1Qxb968aGlp6bi0trZWYy4AoBc67nD4/ve/H2+++WbHZdeuXdWYCwDohY77oYr6+vqor6+vxiwAnCRK/1PizU/e0NNjdGrt3K/09AgfaMCAAT12254cCUD3q6mJUlvX01N0qqeeO3Ci8HJMACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApNV21Ymf/H83RHNzc1edHgDoAX7jAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGm11T5hKSUiIvbt21ftUwMAXeTdn9vv/hw/mqqHwz/+8Y+IiGhtba32qQGALrZ///5oaWk56uerHg6nn356RES8+uqr//GG+WD79u2L1tbW2LVrVzQ3N/f0OCc0u6weu6wu+6weuzw+pZTYv39/DB8+/D8eV/Vw6Nfvf5420dLS4j9clTQ3N9tlldhl9dhlddln9djlscv8D78nRwIAacIBAEirejjU19fHnDlzor6+vtqnPunYZfXYZfXYZXXZZ/XYZfeoKR/0ugsAgP/loQoAIE04AABpwgEASBMOAEDaMYXDvffeGyNGjIiGhoa4+OKL47nnnvuPx//2t7+Nc889NxoaGmLs2LHxhz/84ZiG7Ysq2eXGjRvjS1/6UowYMSJqampi0aJF3TfoCaCSXS5ZsiQuvfTSGDRoUAwaNCgmTZr0gX+PTyaV7HL58uVx4YUXxsCBA2PAgAFx/vnnx4MPPtiN0/ZulX6/fNeyZcuipqYmrrvuuq4d8ARTyT4feOCBqKmpOeLS0NDQjdP2UaVCy5YtK3V1deW+++4rGzduLLfccksZOHBg2bt3b6fHt7W1lf79+5d77rmnbNq0qcyePbuccsopZcOGDZXedJ9T6S6fe+65MnPmzPLQQw+VoUOHlh/96EfdO3Av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wYMHy6mnnloeffTRUkopw4cPL7Nmzer0nH/84x9LbW1t2b17d8d1q1evLhFRVqxYUcndBXpAbQ93C1BlF1xwQcefX3755XjiiSeisbHxfcdt3749Jk+eHJdffnmMHTs2pkyZEpMnT44vf/nLMWjQoKOe/+WXX45t27ZFU1PTEde/9dZbsX379vjb3/4Wr7/+elx++eWdfv2WLVuitbU1hg4d2nHdRRddVOndBHqIcIA+ZsCAAR1/PnDgQFx77bXxwx/+8H3HDRs2LPr37x+rV6+OP/3pT/HYY4/F4sWLY9asWfHss8/GRz/60U7Pf+DAgbjgggvi17/+9fs+d8YZZ0S/fh4Bhb7Mv3Dowz71qU/Fxo0bY8SIETFq1KgjLu8GRk1NTXzmM5+Ju+66K9avXx91dXWxYsWKiIioq6uL9vb2951z69atceaZZ77vnC0tLdHU1BQjRoyINWvWdDrT6NGjY9euXbF3796O655//vku2gBQbcIB+rAZM2bEP//5z7jhhhvi+eefj+3bt8ejjz4aX//616O9vT2effbZuPvuu+OFF16IV199NZYvXx5///vfY8yYMRERMWLEiHjllVdiy5Yt8cYbb8ShQ4fia1/7WgwePDimTp0aTz31VOzYsSPWrl0b3/72t+O1116LiIg777wzFi5cGD/+8Y9j69at8eKLL8bixYsjIuKKK66IkSNHxvTp0+OVV16Jtra2mD17dkT8T8QAvZtwgD5s+PDh0dbWFu3t7TF58uQYO3Zs3H777TFw4MDo169fNDc3x5NPPhlXX311nHPOOTF79uxYuHBhXHXVVRERccstt8To0aPjwgsvjDPOOCPa2tritNNOiyeffDLOOuusuP7662PMmDFx8803x1tvvRXNzc0RETF9+vRYtGhR/OQnP4nzzjsvvvCFL8TWrVsjIqJ///7xyCOPxIEDB+LTn/50fPOb3+x4VUVDQ0PPLApIqymllJ4eAji5tbW1xSWXXBLbtm2LkSNH9vQ4wH8gHIBut2LFimhsbIyPf/zjsW3btvjOd74TgwYNiqeffrqnRwM+gFdVAN1u//79cccdd8Srr74agwcPjkmTJsXChQt7eiwgwW8cAIA0T44EANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAEDafwM2w5w+i2d2aAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"exang\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-5f9eRKoMXci",
        "outputId": "3ee635da-bff9-49e6-ef7f-285d24086a2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "Tohv112OMwLa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "help(sns.barplot)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XQuhLw2VMwfD",
        "outputId": "d0235193-8015-46d3-a89a-51b34d8d0230"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function barplot in module seaborn.categorical:\n",
            "\n",
            "barplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, units=None, weights=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ci=<deprecated>, errcolor=<deprecated>, errwidth=<deprecated>, ax=None, **kwargs)\n",
            "    Show point estimates and errors as rectangular bars.\n",
            "    \n",
            "    A bar plot represents an aggregate or statistical estimate for a numeric\n",
            "    variable with the height of each rectangle and indicates the uncertainty\n",
            "    around that estimate using an error bar. Bar plots include 0 in the\n",
            "    axis range, and they are a good choice when 0 is a meaningful value\n",
            "    for the variable to take.\n",
            "    \n",
            "    See the :ref:`tutorial <categorical_tutorial>` for more information.\n",
            "    \n",
            "    .. note::\n",
            "        By default, this function treats one of the variables as categorical\n",
            "        and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n",
            "        As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n",
            "    \n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    data : DataFrame, Series, dict, array, or list of arrays\n",
            "        Dataset for plotting. If `x` and `y` are absent, this is\n",
            "        interpreted as wide-form. Otherwise it is expected to be long-form.    \n",
            "    x, y, hue : names of variables in `data` or vector data\n",
            "        Inputs for plotting long-form data. See examples for interpretation.    \n",
            "    order, hue_order : lists of strings\n",
            "        Order to plot the categorical levels in; otherwise the levels are\n",
            "        inferred from the data objects.    \n",
            "    estimator : string or callable that maps vector -> scalar\n",
            "        Statistical function to estimate within each categorical bin.\n",
            "    errorbar : string, (string, number) tuple, callable or None\n",
            "        Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n",
            "        with a method name and a level parameter, or a function that maps from a\n",
            "        vector to a (min, max) interval, or None to hide errorbar. See the\n",
            "        :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n",
            "    \n",
            "        .. versionadded:: v0.12.0\n",
            "    n_boot : int\n",
            "        Number of bootstrap samples used to compute confidence intervals.\n",
            "    seed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n",
            "        Seed or random number generator for reproducible bootstrapping.\n",
            "    units : name of variable in `data` or vector data\n",
            "        Identifier of sampling units; used by the errorbar function to\n",
            "        perform a multilevel bootstrap and account for repeated measures\n",
            "    weights : name of variable in `data` or vector data\n",
            "        Data values or column used to compute weighted statistics.\n",
            "        Note that the use of weights may limit other statistical options.\n",
            "    \n",
            "        .. versionadded:: v0.13.1    \n",
            "    orient : \"v\" | \"h\" | \"x\" | \"y\"\n",
            "        Orientation of the plot (vertical or horizontal). This is usually\n",
            "        inferred based on the type of the input variables, but it can be used\n",
            "        to resolve ambiguity when both `x` and `y` are numeric or when\n",
            "        plotting wide-form data.\n",
            "    \n",
            "        .. versionchanged:: v0.13.0\n",
            "            Added 'x'/'y' as options, equivalent to 'v'/'h'.    \n",
            "    color : matplotlib color\n",
            "        Single color for the elements in the plot.    \n",
            "    palette : palette name, list, or dict\n",
            "        Colors to use for the different levels of the ``hue`` variable. Should\n",
            "        be something that can be interpreted by :func:`color_palette`, or a\n",
            "        dictionary mapping hue levels to matplotlib colors.    \n",
            "    saturation : float\n",
            "        Proportion of the original saturation to draw fill colors in. Large\n",
            "        patches often look better with desaturated colors, but set this to\n",
            "        `1` if you want the colors to perfectly match the input values.    \n",
            "    fill : bool\n",
            "        If True, use a solid patch. Otherwise, draw as line art.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    hue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n",
            "        Normalization in data units for colormap applied to the `hue`\n",
            "        variable when it is numeric. Not relevant if `hue` is categorical.\n",
            "    \n",
            "        .. versionadded:: v0.12.0    \n",
            "    width : float\n",
            "        Width allotted to each element on the orient axis. When `native_scale=True`,\n",
            "        it is relative to the minimum distance between two values in the native scale.    \n",
            "    dodge : \"auto\" or bool\n",
            "        When hue mapping is used, whether elements should be narrowed and shifted along\n",
            "        the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n",
            "        orient variable is crossed with the categorical variable or `False` otherwise.\n",
            "    \n",
            "        .. versionchanged:: 0.13.0\n",
            "    \n",
            "            Added `\"auto\"` mode as a new default.    \n",
            "    gap : float\n",
            "        Shrink on the orient axis by this factor to add a gap between dodged elements.\n",
            "    \n",
            "        .. versionadded:: 0.13.0    \n",
            "    log_scale : bool or number, or pair of bools or numbers\n",
            "        Set axis scale(s) to log. A single value sets the data axis for any numeric\n",
            "        axes in the plot. A pair of values sets each axis independently.\n",
            "        Numeric values are interpreted as the desired base (default 10).\n",
            "        When `None` or `False`, seaborn defers to the existing Axes scale.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    native_scale : bool\n",
            "        When True, numeric or datetime values on the categorical axis will maintain\n",
            "        their original scaling rather than being converted to fixed indices.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    formatter : callable\n",
            "        Function for converting categorical data into strings. Affects both grouping\n",
            "        and tick labels.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    legend : \"auto\", \"brief\", \"full\", or False\n",
            "        How to draw the legend. If \"brief\", numeric `hue` and `size`\n",
            "        variables will be represented with a sample of evenly spaced values.\n",
            "        If \"full\", every group will get an entry in the legend. If \"auto\",\n",
            "        choose between brief or full representation based on number of levels.\n",
            "        If `False`, no legend data is added and no legend is drawn.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    capsize : float\n",
            "        Width of the \"caps\" on error bars, relative to bar spacing.    \n",
            "    err_kws : dict\n",
            "        Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    ci : float\n",
            "        Level of the confidence interval to show, in [0, 100].\n",
            "    \n",
            "        .. deprecated:: v0.12.0\n",
            "            Use `errorbar=(\"ci\", ...)`.    \n",
            "    errcolor : matplotlib color\n",
            "        Color used for the error bar lines.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'color': ...}`.    \n",
            "    errwidth : float\n",
            "        Thickness of error bar lines (and caps), in points.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'linewidth': ...}`.    \n",
            "    ax : matplotlib Axes\n",
            "        Axes object to draw the plot onto, otherwise uses the current Axes.    \n",
            "    kwargs : key, value mappings\n",
            "        Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    ax : matplotlib Axes\n",
            "        Returns the Axes object with the plot drawn onto it.    \n",
            "    \n",
            "    See Also\n",
            "    --------\n",
            "    countplot : Show the counts of observations in each categorical bin.    \n",
            "    pointplot : Show point estimates and confidence intervals using dots.    \n",
            "    catplot : Combine a categorical plot with a :class:`FacetGrid`.    \n",
            "    \n",
            "    Notes\n",
            "    -----\n",
            "    \n",
            "    For datasets where 0 is not a meaningful value, a :func:`pointplot` will\n",
            "    allow you to focus on differences between levels of one or more categorical\n",
            "    variables.\n",
            "    \n",
            "    It is also important to keep in mind that a bar plot shows only the mean (or\n",
            "    other aggregate) value, but it is often more informative to show the\n",
            "    distribution of values at each level of the categorical variables. In those\n",
            "    cases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\n",
            "    more appropriate.\n",
            "    \n",
            "    Examples\n",
            "    --------\n",
            "    .. include:: ../docstrings/barplot.rst\n",
            "\n"
          ]
        }
      ]
    },
    {
      "source": [
        "sns.barplot(x=\"exang\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "vnHM9qd7MxIv",
        "outputId": "22fc348f-f2f3-4791-ffbe-11d1ec7e8db5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='exang'>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhMAAAGwCAYAAAATw+f5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAVPElEQVR4nO3de2yW5fnA8ascWgiWguKgHMZh4mEERCU2mCnLrBNHMneEHYWEgW4umRN2VnHxl8GURTZCWGJCPGxKlLj5BxtzMLoljKkxbBpxDBgJMkEnbhyCA6T374+FZlVEytWXQvv5JA3w9u7z3FcfH/vN27dpVSmlBADASerW0RsAAM5sYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKT0qPQJmpub4+WXX47a2tqoqqqq9OkAgHZQSol9+/bF4MGDo1u34z/3UPGYePnll2PYsGGVPg0AUAEvvfRSDB069LhrKh4TtbW1LZvp27dvpU8HALSDvXv3xrBhw1q+jh9PxWPi6Lc2+vbtKyYA4AxzIi9R8AJMACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApPU7Via667ZHoXtP7VJ0OAI7r2Xtu6OgtdBqemQAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUnp09AYAOM2UElVHDnf0Lipu//79Hb2FdtWnT5+oqqrqkHO3e0wcPHgwDh482PLvvXv3tvcpAKigqiOHo+65Rzp6GxV3/fWda8YnnngizjrrrA45d7t/m2P+/PlRV1fX8jZs2LD2PgUAcBpp95j4zne+E3v27Gl5e+mll9r7FADAaaTdv81RU1MTNTU17X1YAE6R0r1n7Bn32Y7eRsU13fWZjt5Cu+rTp0+HndsLMAForaoqSo/qjt5FxXXU6ws6Iz8aCgCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgJQep+pEf/i/z0bfvn1P1ekAgFPEMxMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiYAgBQxAQCkiAkAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKSICQAgRUwAACliAgBIERMAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQ0qPSJyilRETE3r17K30qAKCdHP26ffTr+PFUPCZ2794dERHDhg2r9KkAgHa2b9++qKurO+6aisfE2WefHRER27dvf9fNdEZ79+6NYcOGxUsvvRR9+/bt6O2cUmY3u9m7lq48f2ecvZQS+/bti8GDB7/r2orHRLdu/31ZRl1dXaf5BJ+Mvn37dtn5zW72rqYrzx7RtefvbLOf6JMAXoAJAKSICQAgpeIxUVNTE/PmzYuamppKn+q01JXnN7vZu5quPHtE156/K88eEVFVTuRnPgAA3oFvcwAAKWICAEgREwBAipgAAFJOKiaWLFkSI0aMiF69ekVDQ0M8/fTTx13/2GOPxYUXXhi9evWKsWPHxq9+9atW7y+lxB133BH19fXRu3fvaGxsjM2bN5/M1iquvWefMWNGVFVVtXqbPHlyJUc4aW2Z/YUXXohPfvKTMWLEiKiqqopFixalj9nR2nv+O++8823X/sILL6zgBCevLbPfd999ceWVV0b//v2jf//+0djY+Lb1nfWeP5HZO+s9//jjj8eECROiX79+0adPnxg/fnw89NBDrdZ01ut+IrOfSdf9pJQ2Wr58eamuri7Lli0rL7zwQpk1a1bp169feeWVV465ft26daV79+7l7rvvLhs3biy33XZb6dmzZ3n++edb1ixYsKDU1dWVX/7yl+Uvf/lL+ehHP1pGjhxZ3njjjbZur6IqMfv06dPL5MmTy86dO1veXn/99VM10glr6+xPP/10mTt3bnnkkUfKoEGDyr333ps+ZkeqxPzz5s0rY8aMaXXt//nPf1Z4krZr6+yf+9znypIlS8qGDRvKiy++WGbMmFHq6urKjh07WtZ01nv+RGbvrPf82rVry+OPP142btxYtmzZUhYtWlS6d+9eVq1a1bKms173E5n9TLnuJ6vNMXH55ZeXm2++ueXfR44cKYMHDy7z588/5vqpU6eWKVOmtHqsoaGh3HjjjaWUUpqbm8ugQYPKPffc0/L+f//736WmpqY88sgjbd1eRbX37KX89z+w66+/viL7bU9tnf1/DR8+/JhfTDPHPNUqMf+8efPKxRdf3I67rIzsdXrzzTdLbW1teeCBB0opnfuef6u3zl5K17jnj7rkkkvKbbfdVkrpWte9lNazl3LmXPeT1aZvcxw6dCieffbZaGxsbHmsW7du0djYGOvXrz/mx6xfv77V+oiIa6+9tmX9tm3bYteuXa3W1NXVRUNDwzsesyNUYvajmpqa4j3veU9ccMEF8eUvf7nlN62eLk5m9o44ZqVUcq+bN2+OwYMHx6hRo+Lzn/98bN++PbvddtUesx84cCAOHz7c8kv/OvM9/1Zvnf2ozn7Pl1JizZo1sWnTprjqqqsioutc92PNftTpft0z2hQTr732Whw5ciQGDhzY6vGBAwfGrl27jvkxu3btOu76o3+25ZgdoRKzR0RMnjw5HnzwwVizZk388Ic/jN///vdx3XXXxZEjR9p/iJN0MrN3xDErpVJ7bWhoiPvvvz9WrVoVS5cujW3btsWVV14Z+/bty2653bTH7N/61rdi8ODBLf9z7sz3/Fu9dfaIzn3P79mzJ84666yorq6OKVOmxOLFi+Oaa66JiM5/3Y83e8SZcd0zKv5bQzm+z3zmMy1/Hzt2bIwbNy7e9773RVNTU1x99dUduDMq7brrrmv5+7hx46KhoSGGDx8ejz76aMycObMDd9Z+FixYEMuXL4+mpqbo1atXR2/nlHqn2TvzPV9bWxt//vOfY//+/bFmzZq49dZbY9SoUfHBD36wo7dWce82e2e+7hFtfGZiwIAB0b1793jllVdaPf7KK6/EoEGDjvkxgwYNOu76o3+25ZgdoRKzH8uoUaNiwIABsWXLlvym28nJzN4Rx6yUU7XXfv36xfnnn99prv3ChQtjwYIF8eSTT8a4ceNaHu/M9/xR7zT7sXSme75bt25x3nnnxfjx42POnDnxqU99KubPnx8Rnf+6H2/2Yzkdr3tGm2Kiuro6LrvsslizZk3LY83NzbFmzZqYOHHiMT9m4sSJrdZHRPz2t79tWT9y5MgYNGhQqzV79+6Np5566h2P2REqMfux7NixI3bv3h319fXts/F2cDKzd8QxK+VU7XX//v2xdevWTnHt77777rjrrrti1apVMWHChFbv68z3fMTxZz+WznzPNzc3x8GDByOi81/3t/rf2Y/ldLzuKW19xeby5ctLTU1Nuf/++8vGjRvL7NmzS79+/cquXbtKKaV88YtfLN/+9rdb1q9bt6706NGjLFy4sLz44otl3rx5x/zR0H79+pUnnniiPPfcc+X6668/bX9cqD1n37dvX5k7d25Zv3592bZtW1m9enW59NJLy+jRo8t//vOfDpnxnbR19oMHD5YNGzaUDRs2lPr6+jJ37tyyYcOGsnnz5hM+5umkEvPPmTOnNDU1lW3btpV169aVxsbGMmDAgPLqq6+e8vmOp62zL1iwoFRXV5cVK1a0+jG4ffv2tVrTGe/5d5u9M9/zP/jBD8qTTz5Ztm7dWjZu3FgWLlxYevToUe67776WNZ31ur/b7GfSdT9ZbY6JUkpZvHhxee9731uqq6vL5ZdfXv70pz+1vG/SpEll+vTprdY/+uij5fzzzy/V1dVlzJgxZeXKla3e39zcXG6//fYycODAUlNTU66++uqyadOmk9laxbXn7AcOHCgf/vCHy7nnnlt69uxZhg8fXmbNmnVafjEtpW2zb9u2rUTE294mTZp0wsc83bT3/NOmTSv19fWlurq6DBkypEybNq1s2bLlFE504toy+/Dhw485+7x581rWdNZ7/t1m78z3/Pe+971y3nnnlV69epX+/fuXiRMnluXLl7c6Xme97u82+5l23U+GX0EOAKT43RwAQIqYAABSxAQAkCImAIAUMQEApIgJACBFTAAAKWICAEgREwBAipgAAFLEBACQIiagC2pubo758+fHyJEjo3fv3nHxxRfHihUropQSjY2Nce2118bRX9vz+uuvx9ChQ+OOO+6IiIgjR47EzJkzWz72ggsuiB//+Metjj9jxoz42Mc+FgsXLoz6+vo455xz4uabb47Dhw+3rNm5c2dMmTIlevfuHSNHjoyHH344RowYEYsWLTplnwegffTo6A0Ap978+fPjZz/7Wfz0pz+N0aNHxx/+8If4whe+EOeee2488MADMXbs2PjJT34SX/va1+Kmm26KIUOGtMREc3NzDB06NB577LE455xz4o9//GPMnj076uvrY+rUqS3nWLt2bdTX18fatWtjy5YtMW3atBg/fnzMmjUrIiJuuOGGeO2116KpqSl69uwZt956a7z66qsd8vkAcvzWUOhiDh48GGeffXasXr06Jk6c2PL4l770pThw4EA8/PDD8dhjj8UNN9wQt9xySyxevDg2bNgQo0ePfsdjfvWrX41du3bFihUrIuK/z0w0NTXF1q1bo3v37hERMXXq1OjWrVssX748/vrXv8ZFF10UzzzzTEyYMCEiIrZs2RKjR4+Oe++9N2655ZbKfQKAdueZCehitmzZEgcOHIhrrrmm1eOHDh2KSy65JCIiPv3pT8cvfvGLWLBgQSxduvRtIbFkyZJYtmxZbN++Pd544404dOhQjB8/vtWaMWPGtIRERER9fX08//zzERGxadOm6NGjR1x66aUt7z/vvPOif//+7TkqcIqICehi9u/fHxERK1eujCFDhrR6X01NTUREHDhwIJ599tno3r17bN68udWa5cuXx9y5c+NHP/pRTJw4MWpra+Oee+6Jp556qtW6nj17tvp3VVVVNDc3t/c4wGlATEAX8/73vz9qampi+/btMWnSpGOumTNnTnTr1i1+/etfx0c+8pGYMmVKfOhDH4qIiHXr1sUVV1wRX/nKV1rWb926tU17uOCCC+LNN9+MDRs2xGWXXRYR/33G5F//+tdJTgV0JDEBXUxtbW3MnTs3vv71r0dzc3N84AMfiD179sS6deuib9++MWDAgFi2bFmsX78+Lr300vjGN74R06dPj+eeey769+8fo0ePjgcffDB+85vfxMiRI+Ohhx6KZ555JkaOHHnCe7jwwgujsbExZs+eHUuXLo2ePXvGnDlzonfv3lFVVVXB6YFK8KOh0AXdddddcfvtt8f8+fPjoosuismTJ8fKlStjxIgRMXPmzLjzzjtbXs/w/e9/PwYOHBg33XRTRETceOON8YlPfCKmTZsWDQ0NsXv37lbPUpyoBx98MAYOHBhXXXVVfPzjH49Zs2ZFbW1t9OrVq11nBSrPT3MAp4UdO3bEsGHDYvXq1XH11Vd39HaANhATQIf43e9+F/v374+xY8fGzp0745vf/Gb84x//iL/97W9ve/EmcHrzmgmgQxw+fDi++93vxt///veora2NK664In7+858LCTgDeWYCAEjxAkwAIEVMAAApYgIASBETAECKmAAAUsQEAJAiJgCAFDEBAKT8PztKnR3u0qhWAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"slope\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j5wR9GdmM7Iw",
        "outputId": "4a02c3d6-b4b8-4ae4-f063-e1523cdb4069"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 2, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "jihHGM5DNG96"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "sns.barplot(x=\"slope\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "vOQoWXo6NHMz",
        "outputId": "8f3477c5-9ca4-4d9b-c90a-f35932f53afe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='slope'>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAVwklEQVR4nO3dfWyVhdn48atQ2jKkiCIos2rE4NsAo0ZE5EdUlG2GSbYMHlwYbhJ1QpwzQ9nY0qGbEn+6mDj2xoz4xwSUqXuR+DJmxxB1DsrUyHxDppni5oRRcZNC7+ePPTRD0F2nnNNS+XySk8jp3ftc50o5/XJ6jq0qiqIIAICEHl09AADQfQgHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQVl3uE7a1tcVrr70Wffv2jaqqqnKfHgCogKIooqWlJQYPHhw9erz/8wplD4fXXnstGhoayn1aAKATvPrqq3H44Ye/78fLHg59+/Ztv+H6+vpynx4AqIAtW7ZEQ0ND+/fx91P2cNj544n6+nrhAADdzH97mYEXRwIAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASKuu1In/3zcWRc/a3pU6PQB0K6v//+e7eoSy8IwDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJBW3dUDAMA+qSiiakdr2U739ttvl+1cffr0iaqqqrKdrxR7HQ7vvvtuvPvuu+1/3rJly96eEgC6XNWO1uj31KKyne+CC8p3rp///OdxwAEHlO18pdjrH1XccMMN0a9fv/ZLQ0NDOeYCAPZBex0OX/va1+If//hH++XVV18tx1wAwD5or39UUVtbG7W1teWYBQD2GUXPXvGP4VPKdr6m6/6nbOfq06dP2c5VKi+OBIA9qaqKorqmbKfrqtcklJu3YwIAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACCtulInXvHtKVFfX1+p0wMAXcAzDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJBWXe4TFkURERFbtmwp96kBgArZ+X175/fx91P2cPj73/8eERENDQ3lPjUAUGEtLS3Rr1+/9/142cPhoIMOioiIV1555QNv+MNsy5Yt0dDQEK+++mrU19d39Thdxh7sIMIOdrIHO4jYt3dQFEW0tLTE4MGDP/C4sodDjx7/ftlEv3799rmldLb6+vr9fgcR9hBhBxF2sJM92EHEvruDzD/4vTgSAEgTDgBAWtnDoba2NhobG6O2trbcp+427ODf7MEOIuxgJ3uwg4gPxw6qiv/2vgsAgP/jRxUAQJpwAADShAMAkCYcAIC0DoXD/Pnz46ijjoq6uroYOXJk/P73v//A4+++++447rjjoq6uLoYNGxbLli3r0LD7klJ2sGDBghgzZkz0798/+vfvH+PGjfuvO+suSv1a2Gnx4sVRVVUVEydOrOyAnaDUHWzevDlmzJgRhx12WNTW1sbQoUO7/d+JUndwyy23xLHHHhu9e/eOhoaG+MpXvhL/+te/Omna8luxYkVMmDAhBg8eHFVVVXHffff9189pamqKk08+OWpra+OYY46JhQsXVnzOSit1D/fcc0+ce+65ccghh0R9fX2MGjUqHnzwwc4ZtkI68rWw06OPPhrV1dVx0kknVWy+cig5HJYsWRJXXXVVNDY2xpo1a2LEiBExfvz4+Otf/7rH41etWhVTpkyJiy++OJqbm2PixIkxceLEeOaZZ/Z6+K5S6g6amppiypQp8cgjj8Rjjz0WDQ0Ncd5558Vf/vKXTp68vErdw04bNmyIr371qzFmzJhOmrRySt3Btm3b4txzz40NGzbE0qVL47nnnosFCxbERz/60U6evHxK3cGdd94Zs2fPjsbGxli3bl3cdtttsWTJkvj617/eyZOXz9atW2PEiBExf/781PEvv/xynH/++XHWWWfF2rVr48orr4zp06d3+2+ape5hxYoVce6558ayZcti9erVcdZZZ8WECROiubm5wpNWTqk72Gnz5s3x+c9/Ps4555wKTVZGRYlOO+20YsaMGe1/3rFjRzF48ODihhtu2OPxkyZNKs4///xdrhs5cmRx6aWXlnrT+4xSd/Be27dvL/r27VvccccdlRqxU3RkD9u3by/OOOOM4ic/+Ukxbdq04oILLuiESSun1B384Ac/KI4++uhi27ZtnTVixZW6gxkzZhRnn332LtddddVVxejRoys6Z2eJiOLee+/9wGOuvvrq4sQTT9zlusmTJxfjx4+v4GSdK7OHPTnhhBOKuXPnln+gLlDKDiZPnlx84xvfKBobG4sRI0ZUdK69VdIzDtu2bYvVq1fHuHHj2q/r0aNHjBs3Lh577LE9fs5jjz22y/EREePHj3/f4/d1HdnBe73zzjvR2tra/gvBuqOO7uHaa6+NgQMHxsUXX9wZY1ZUR3bwi1/8IkaNGhUzZsyIQYMGxcc+9rG4/vrrY8eOHZ01dll1ZAdnnHFGrF69uv3HGevXr49ly5bFJz/5yU6ZeV/wYXtcLJe2trZoaWnp1o+NHXH77bfH+vXro7GxsatHSSnpl1y9+eabsWPHjhg0aNAu1w8aNCj+9Kc/7fFzNm7cuMfjN27cWOKo+4aO7OC9rrnmmhg8ePBuDxzdSUf2sHLlyrjtttti7dq1nTBh5XVkB+vXr4/f/OY38bnPfS6WLVsWL774Ylx++eXR2trabR40/lNHdnDhhRfGm2++GWeeeWYURRHbt2+Pyy67rFv/qKJU7/e4uGXLlvjnP/8ZvXv37qLJutZNN90Ub7/9dkyaNKmrR+k0L7zwQsyePTt+97vfRXV12X/vZEV4V0UnmzdvXixevDjuvffeqKur6+pxOk1LS0tMnTo1FixYEAMGDOjqcbpMW1tbDBw4MH784x/HKaecEpMnT445c+bED3/4w64erdM0NTXF9ddfH9///vdjzZo1cc8998T9998f1113XVePRhe68847Y+7cuXHXXXfFwIEDu3qcTrFjx4648MILY+7cuTF06NCuHietpLwZMGBA9OzZM954441drn/jjTfi0EMP3ePnHHrooSUdv6/ryA52uummm2LevHnx61//OoYPH17JMSuu1D289NJLsWHDhpgwYUL7dW1tbRERUV1dHc8991wMGTKkskOXWUe+Fg477LDo1atX9OzZs/26448/PjZu3Bjbtm2Lmpqais5cbh3ZwTe/+c2YOnVqTJ8+PSIihg0bFlu3bo1LLrkk5syZEz16fPj/PfN+j4v19fX75bMNixcvjunTp8fdd9/drZ+JLVVLS0v84Q9/iObm5pg5c2ZE/PtxsSiKqK6ujoceeijOPvvsLp5ydyX9Da2pqYlTTjklli9f3n5dW1tbLF++PEaNGrXHzxk1atQux0dEPPzww+97/L6uIzuIiLjxxhvjuuuuiwceeCBOPfXUzhi1okrdw3HHHRdPP/10rF27tv3yqU99qv1V5Q0NDZ05fll05Gth9OjR8eKLL7ZHU0TE888/H4cddli3i4aIju3gnXfe2S0OdoZUsZ/86pwP2+Pi3li0aFF84QtfiEWLFsX555/f1eN0qvr6+t0eFy+77LI49thjY+3atTFy5MiuHnHPSn015eLFi4va2tpi4cKFxbPPPltccsklxYEHHlhs3LixKIqimDp1ajF79uz24x999NGiurq6uOmmm4p169YVjY2NRa9evYqnn366TK/v7Hyl7mDevHlFTU1NsXTp0uL1119vv7S0tHTVXSiLUvfwXh+Gd1WUuoNXXnml6Nu3bzFz5sziueeeK371q18VAwcOLL797W931V3Ya6XuoLGxsejbt2+xaNGiYv369cVDDz1UDBkypJg0aVJX3YW91tLSUjQ3NxfNzc1FRBTf/e53i+bm5uLPf/5zURRFMXv27GLq1Kntx69fv774yEc+UsyaNatYt25dMX/+/KJnz57FAw880FV3oSxK3cNPf/rTorq6upg/f/4uj42bN2/uqruw10rdwXt1h3dVlBwORVEUt956a3HEEUcUNTU1xWmnnVY8/vjj7R8bO3ZsMW3atF2Ov+uuu4qhQ4cWNTU1xYknnljcf//9ezX0vqCUHRx55JFFROx2aWxs7PzBy6zUr4X/9GEIh6IofQerVq0qRo4cWdTW1hZHH3108Z3vfKfYvn17J09dXqXsoLW1tfjWt75VDBkypKirqysaGhqKyy+/vNi0aVPnD14mjzzyyB7/ju+839OmTSvGjh272+ecdNJJRU1NTXH00UcXt99+e6fPXW6l7mHs2LEfeHx31JGvhf/UHcLBr9UGANI+/K9CAgDKRjgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHIC666KKYOHFiV48BdAPCAQBIEw4AQJpwgP3I0qVLY9iwYdG7d+84+OCDY9y4cbF169bdjnv33XfjiiuuiIEDB0ZdXV2ceeaZ8eSTT7Z/vKmpKaqqquL++++P4cOHR11dXZx++unxzDPP7HKelStXxpgxY6J3797R0NAQV1xxxR5vD+g+hAPsJ15//fWYMmVKfPGLX4x169ZFU1NTfPrTn449/Z67q6++On72s5/FHXfcEWvWrIljjjkmxo8fH2+99dYux82aNStuvvnmePLJJ+OQQw6JCRMmRGtra0REvPTSS/Hxj388PvOZz8RTTz0VS5YsiZUrV8bMmTM75f4CleG3Y8J+Ys2aNXHKKafEhg0b4sgjj9zlYxdddFFs3rw57rvvvti6dWv0798/Fi5cGBdeeGFERLS2tsZRRx0VV155ZcyaNSuamprirLPOisWLF8fkyZMjIuKtt96Kww8/PBYuXBiTJk2K6dOnR8+ePeNHP/pR++2sXLkyxo4dG1u3bo26urrOu/NA2XjGAfYTI0aMiHPOOSeGDRsWn/3sZ2PBggWxadOm3Y576aWXorW1NUaPHt1+Xa9eveK0006LdevW7XLsqFGj2v/7oIMOimOPPbb9mD/+8Y+xcOHCOOCAA9ov48ePj7a2tnj55ZcrdC+BSqvu6gGAztGzZ894+OGHY9WqVfHQQw/FrbfeGnPmzIknnniiIrf39ttvx6WXXhpXXHHFbh874ogjKnKbQOV5xgH2I1VVVTF69OiYO3duNDc3R01NTdx77727HDNkyJCoqamJRx99tP261tbWePLJJ+OEE07Y5djHH3+8/b83bdoUzz//fBx//PEREXHyySfHs88+G8ccc8xul5qamgreS6CSPOMA+4knnngili9fHuedd14MHDgwnnjiifjb3/4Wxx9/fDz11FPtx/Xp0ye+9KUvxaxZs+Kggw6KI444Im688cZ455134uKLL97lnNdee20cfPDBMWjQoJgzZ04MGDCg/X8kdc0118Tpp58eM2fOjOnTp0efPn3i2WefjYcffji+973vdeZdB8pIOMB+or6+PlasWBG33HJLbNmyJY488si4+eab4xOf+EQsWbJkl2PnzZsXbW1tMXXq1GhpaYlTTz01Hnzwwejfv/9ux335y1+OF154IU466aT45S9/2f5swvDhw+O3v/1tzJkzJ8aMGRNFUcSQIUPaX0wJdE/eVQGUbOe7KjZt2hQHHnhgV48DdCKvcQAA0oQDAJDmRxUAQJpnHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkPa/MO5FpS58RXQAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "sns.barplot(x=\"slope\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "tfaZr3oQNIBl",
        "outputId": "fbfdf1b1-e319-46a4-cbec-6290f1e27a3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='slope'>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAVwElEQVR4nO3dfWyVhfnw8atQ2jKkiC+gzIoRoqIDjBoRkYeoKNsIk2wZ/GBhuknUCXHODGVjS4duSnx0MXHsjRnxjwmoU/ciUZizYyg6B2VqZL4h00xxc8KouEmh9/PHHpofgnqdck4L8vkkJ5HTu/e5zpVy+uX0HFtVFEURAAAJ3bp6AABg/yEcAIA04QAApAkHACBNOAAAacIBAEgTDgBAWnW5T9jW1havvfZa9O7dO6qqqsp9egCgAoqiiJaWlhgwYEB06/b+zyuUPRxee+21aGhoKPdpAYBO8Oqrr8ZRRx31vh8vezj07t27/Ybr6+vLfXoAoAK2bNkSDQ0N7d/H30/Zw2Hnjyfq6+uFAwDsZz7sZQZeHAkApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIK26Uif+P99aFN1re1bq9ACwX1n9f7/Y1SOUhWccAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIC06q4eAAD2SUURVTtay3a6t99+u2zn6tWrV1RVVZXtfKXY63B499134913323/85YtW/b2lADQ5ap2tEafpxaV7XwXXFC+c/3yl7+Mgw46qGznK8Ve/6jihhtuiD59+rRfGhoayjEXALAP2utw+MY3vhH/+te/2i+vvvpqOeYCAPZBe/2jitra2qitrS3HLACwzyi694h/DZtStvM1Xfc/ZTtXr169ynauUnlxJADsSVVVFNU1ZTtdV70mody8HRMASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABp1ZU68YrvTon6+vpKnR4A6AKecQAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIC06nKfsCiKiIjYsmVLuU8NAFTIzu/bO7+Pv5+yh8M///nPiIhoaGgo96kBgApraWmJPn36vO/Hyx4OhxxySEREvPLKKx94wx9lW7ZsiYaGhnj11Vejvr6+q8fpMvZgBzvZgx3sZA/77g6KooiWlpYYMGDABx5X9nDo1u2/L5vo06fPPrWQrlBfX3/A7yDCHiLsYCd7sIOd7GHf3EHmH/xeHAkApAkHACCt7OFQW1sbjY2NUVtbW+5T7zfs4L/swQ52sgc72Mke9v8dVBUf9r4LAID/z48qAIA04QAApAkHACBNOAAAaR0Kh/nz58cxxxwTdXV1MWLEiPjjH//4gcfffffdccIJJ0RdXV0MHTo0li5d2qFh9yWl7GDBggUxevTo6Nu3b/Tt2zfGjh37oTvbX5T6tbDT4sWLo6qqKiZOnFjZATtBqTvYvHlzzJgxI4488siora2N44477oD7OxERccstt8Txxx8fPXv2jIaGhvja174W//nPfzpp2vJbsWJFTJgwIQYMGBBVVVVx//33f+jnNDU1xSmnnBK1tbUxePDgWLhwYcXnrKRSd3DvvffGeeedF4cffnjU19fHyJEj46GHHuqcYSuoI18LOz366KNRXV0dJ598csXm21slh8OSJUviqquuisbGxlizZk0MHz48xo0bF3//+9/3ePxjjz0WU6ZMiYsvvjiam5tj4sSJMXHixHjmmWf2eviuUuoOmpqaYsqUKfHII4/EqlWroqGhIc4///z429/+1smTl1epe9hpw4YN8fWvfz1Gjx7dSZNWTqk72LZtW5x33nmxYcOGuOeee+K5556LBQsWxMc//vFOnry8St3DnXfeGbNnz47GxsZYt25d3HbbbbFkyZL45je/2cmTl8/WrVtj+PDhMX/+/NTxL7/8cowfPz7OPvvsWLt2bVx55ZUxffr0/fobZ6k7WLFiRZx33nmxdOnSWL16dZx99tkxYcKEaG5urvCklVXqHnbavHlzfPGLX4xzzz23QpOVSVGi008/vZgxY0b7n3fs2FEMGDCguOGGG/Z4/KRJk4rx48fvct2IESOKSy+9tNSb3meUuoP32r59e9G7d+/ijjvuqNSInaIje9i+fXtx5plnFj/72c+KCy+8sLjgggs6YdLKKXUHP/rRj4pjjz222LZtW2eN2ClK3cOMGTOKc845Z5frrrrqqmLUqFEVnbOzRERx3333feAxV199dXHSSSftct3kyZOLcePGVXCyzpPZwZ6ceOKJxdy5c8s/UBcpZQ+TJ08uvvWtbxWNjY3F8OHDKzrX3ijpGYdt27bF6tWrY+zYse3XdevWLcaOHRurVq3a4+esWrVql+MjIsaNG/e+x+/rOrKD93rnnXeitbW1/ReC7Y86uodrr702+vXrFxdffHFnjFlRHdnBr371qxg5cmTMmDEj+vfvH5/4xCfi+uuvjx07dnTW2GXXkT2ceeaZsXr16vYfZ6xfvz6WLl0an/70pztl5n3BR+2xsRza2tqipaVlv35s7Kjbb7891q9fH42NjV09yocq6Zdcvfnmm7Fjx47o37//Ltf3798//vKXv+zxczZu3LjH4zdu3FjiqPuGjuzgva655poYMGDAbg8a+5OO7GHlypVx2223xdq1azthwsrryA7Wr18fv/vd7+ILX/hCLF26NF588cW4/PLLo7W1db94wNiTjuxh6tSp8eabb8ZZZ50VRVHE9u3b47LLLtuvf1RRqvd7bNyyZUv8+9//jp49e3bRZF3npptuirfffjsmTZrU1aN0qhdeeCFmz54df/jDH6K6uuy/e7LsvKuik82bNy8WL14c9913X9TV1XX1OJ2mpaUlpk2bFgsWLIjDDjus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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#number of major vessels (0-3) colored by flourosopy"
      ],
      "metadata": {
        "id": "OM_H7QaXNXQz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"ca\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s1tt1pTZNcKC",
        "outputId": "88663d77-9d77-4ad7-84ad-11ece6ef445a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 2, 1, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(dataset[\"ca\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "oSy3prLfNfm1",
        "outputId": "7a7e65f0-bade-4454-ca9c-a6e24530dc8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(dataset[\"ca\"],y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "zNZefO2vNkvU",
        "outputId": "8f9793bb-f7e5-4b71-86de-3c1b38f67f88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "barplot() takes from 0 to 1 positional arguments but 2 were given",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-67-5cec12861210>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbarplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ca\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: barplot() takes from 0 to 1 positional arguments but 2 were given"
          ]
        }
      ]
    },
    {
      "source": [
        "!pip install seaborn"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PiK3YKeuNtmJ",
        "outputId": "7d12d9c9-1e15-4812-f710-bece49085d77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.25.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.0.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "DKh0B1JBNu-m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "help(sns.barplot)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QVbxGmcANvMs",
        "outputId": "b96fb040-dfc3-4dff-c08a-2bfed78abf8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function barplot in module seaborn.categorical:\n",
            "\n",
            "barplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, units=None, weights=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ci=<deprecated>, errcolor=<deprecated>, errwidth=<deprecated>, ax=None, **kwargs)\n",
            "    Show point estimates and errors as rectangular bars.\n",
            "    \n",
            "    A bar plot represents an aggregate or statistical estimate for a numeric\n",
            "    variable with the height of each rectangle and indicates the uncertainty\n",
            "    around that estimate using an error bar. Bar plots include 0 in the\n",
            "    axis range, and they are a good choice when 0 is a meaningful value\n",
            "    for the variable to take.\n",
            "    \n",
            "    See the :ref:`tutorial <categorical_tutorial>` for more information.\n",
            "    \n",
            "    .. note::\n",
            "        By default, this function treats one of the variables as categorical\n",
            "        and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n",
            "        As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n",
            "    \n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    data : DataFrame, Series, dict, array, or list of arrays\n",
            "        Dataset for plotting. If `x` and `y` are absent, this is\n",
            "        interpreted as wide-form. Otherwise it is expected to be long-form.    \n",
            "    x, y, hue : names of variables in `data` or vector data\n",
            "        Inputs for plotting long-form data. See examples for interpretation.    \n",
            "    order, hue_order : lists of strings\n",
            "        Order to plot the categorical levels in; otherwise the levels are\n",
            "        inferred from the data objects.    \n",
            "    estimator : string or callable that maps vector -> scalar\n",
            "        Statistical function to estimate within each categorical bin.\n",
            "    errorbar : string, (string, number) tuple, callable or None\n",
            "        Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n",
            "        with a method name and a level parameter, or a function that maps from a\n",
            "        vector to a (min, max) interval, or None to hide errorbar. See the\n",
            "        :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n",
            "    \n",
            "        .. versionadded:: v0.12.0\n",
            "    n_boot : int\n",
            "        Number of bootstrap samples used to compute confidence intervals.\n",
            "    seed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n",
            "        Seed or random number generator for reproducible bootstrapping.\n",
            "    units : name of variable in `data` or vector data\n",
            "        Identifier of sampling units; used by the errorbar function to\n",
            "        perform a multilevel bootstrap and account for repeated measures\n",
            "    weights : name of variable in `data` or vector data\n",
            "        Data values or column used to compute weighted statistics.\n",
            "        Note that the use of weights may limit other statistical options.\n",
            "    \n",
            "        .. versionadded:: v0.13.1    \n",
            "    orient : \"v\" | \"h\" | \"x\" | \"y\"\n",
            "        Orientation of the plot (vertical or horizontal). This is usually\n",
            "        inferred based on the type of the input variables, but it can be used\n",
            "        to resolve ambiguity when both `x` and `y` are numeric or when\n",
            "        plotting wide-form data.\n",
            "    \n",
            "        .. versionchanged:: v0.13.0\n",
            "            Added 'x'/'y' as options, equivalent to 'v'/'h'.    \n",
            "    color : matplotlib color\n",
            "        Single color for the elements in the plot.    \n",
            "    palette : palette name, list, or dict\n",
            "        Colors to use for the different levels of the ``hue`` variable. Should\n",
            "        be something that can be interpreted by :func:`color_palette`, or a\n",
            "        dictionary mapping hue levels to matplotlib colors.    \n",
            "    saturation : float\n",
            "        Proportion of the original saturation to draw fill colors in. Large\n",
            "        patches often look better with desaturated colors, but set this to\n",
            "        `1` if you want the colors to perfectly match the input values.    \n",
            "    fill : bool\n",
            "        If True, use a solid patch. Otherwise, draw as line art.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    hue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n",
            "        Normalization in data units for colormap applied to the `hue`\n",
            "        variable when it is numeric. Not relevant if `hue` is categorical.\n",
            "    \n",
            "        .. versionadded:: v0.12.0    \n",
            "    width : float\n",
            "        Width allotted to each element on the orient axis. When `native_scale=True`,\n",
            "        it is relative to the minimum distance between two values in the native scale.    \n",
            "    dodge : \"auto\" or bool\n",
            "        When hue mapping is used, whether elements should be narrowed and shifted along\n",
            "        the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n",
            "        orient variable is crossed with the categorical variable or `False` otherwise.\n",
            "    \n",
            "        .. versionchanged:: 0.13.0\n",
            "    \n",
            "            Added `\"auto\"` mode as a new default.    \n",
            "    gap : float\n",
            "        Shrink on the orient axis by this factor to add a gap between dodged elements.\n",
            "    \n",
            "        .. versionadded:: 0.13.0    \n",
            "    log_scale : bool or number, or pair of bools or numbers\n",
            "        Set axis scale(s) to log. A single value sets the data axis for any numeric\n",
            "        axes in the plot. A pair of values sets each axis independently.\n",
            "        Numeric values are interpreted as the desired base (default 10).\n",
            "        When `None` or `False`, seaborn defers to the existing Axes scale.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    native_scale : bool\n",
            "        When True, numeric or datetime values on the categorical axis will maintain\n",
            "        their original scaling rather than being converted to fixed indices.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    formatter : callable\n",
            "        Function for converting categorical data into strings. Affects both grouping\n",
            "        and tick labels.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    legend : \"auto\", \"brief\", \"full\", or False\n",
            "        How to draw the legend. If \"brief\", numeric `hue` and `size`\n",
            "        variables will be represented with a sample of evenly spaced values.\n",
            "        If \"full\", every group will get an entry in the legend. If \"auto\",\n",
            "        choose between brief or full representation based on number of levels.\n",
            "        If `False`, no legend data is added and no legend is drawn.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    capsize : float\n",
            "        Width of the \"caps\" on error bars, relative to bar spacing.    \n",
            "    err_kws : dict\n",
            "        Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n",
            "    \n",
            "        .. versionadded:: v0.13.0    \n",
            "    ci : float\n",
            "        Level of the confidence interval to show, in [0, 100].\n",
            "    \n",
            "        .. deprecated:: v0.12.0\n",
            "            Use `errorbar=(\"ci\", ...)`.    \n",
            "    errcolor : matplotlib color\n",
            "        Color used for the error bar lines.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'color': ...}`.    \n",
            "    errwidth : float\n",
            "        Thickness of error bar lines (and caps), in points.\n",
            "    \n",
            "        .. deprecated:: 0.13.0\n",
            "            Use `err_kws={'linewidth': ...}`.    \n",
            "    ax : matplotlib Axes\n",
            "        Axes object to draw the plot onto, otherwise uses the current Axes.    \n",
            "    kwargs : key, value mappings\n",
            "        Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    ax : matplotlib Axes\n",
            "        Returns the Axes object with the plot drawn onto it.    \n",
            "    \n",
            "    See Also\n",
            "    --------\n",
            "    countplot : Show the counts of observations in each categorical bin.    \n",
            "    pointplot : Show point estimates and confidence intervals using dots.    \n",
            "    catplot : Combine a categorical plot with a :class:`FacetGrid`.    \n",
            "    \n",
            "    Notes\n",
            "    -----\n",
            "    \n",
            "    For datasets where 0 is not a meaningful value, a :func:`pointplot` will\n",
            "    allow you to focus on differences between levels of one or more categorical\n",
            "    variables.\n",
            "    \n",
            "    It is also important to keep in mind that a bar plot shows only the mean (or\n",
            "    other aggregate) value, but it is often more informative to show the\n",
            "    distribution of values at each level of the categorical variables. In those\n",
            "    cases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\n",
            "    more appropriate.\n",
            "    \n",
            "    Examples\n",
            "    --------\n",
            "    .. include:: ../docstrings/barplot.rst\n",
            "\n"
          ]
        }
      ]
    },
    {
      "source": [
        "sns.barplot(x=\"ca\", y=y, data=dataset)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "AAwTU-48Nv8O",
        "outputId": "ce4e0700-60dd-47c2-9877-01f03024f493"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='ca'>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAGwCAYAAADBk+2hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUcElEQVR4nO3dfWzdddn48avr1nbOdsMgo4MysvEYHYEwNzeGoM6YbFFMTJAb3I2JgISZKIQM51iGTNiCS1hUMDr3YAyhisFoYIHpdLkDzCzOLffYA7oHBR1bhMgeIHYP/fz++P1o3G8DrtOentM1r1dy/ug5337PdXFo+6bnHNpQSikBAJAwpN4DAACnD+EAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShlb7hN3d3bF3795obW2NhoaGap8eAOgHpZQ4dOhQjBkzJoYMeeffK1Q9HPbu3RsdHR3VPi0AUAOvvPJKnHvuue94e9XDobW1teeO29raqn16AKAfHDx4MDo6Onp+jr+TqofD209PtLW1CQcAOM2818sMvDgSAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAEDa0P468cfufTwam4f31+kBoCIbv/Pf9R5hUPAbBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgbWi9BwBgAColGo4frfcUVXX48OF6j1A1I0aMiIaGhrrcd5/DoaurK7q6uno+PnjwYF9PCUCdNRw/GiP/9/F6j1FV1103ePb51a9+Fe9///vrct99fqpi0aJFMXLkyJ5LR0dHNeYCAAagPofD3Llz48CBAz2XV155pRpzAQADUJ+fqmhubo7m5uZqzALAAFEah8WBy/6r3mNU1bqFN9R7hKoZMWJE3e7biyMBOFlDQ5ShTfWeoqrq9ZqAwcbbMQGANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJA2tL9O/D/f/q9oa2vrr9MDAHXgNw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQJpwAADShAMAkCYcAIA04QAApAkHACBNOAAAacIBAEgTDgBAmnAAANKEAwCQNrTaJyylRETEwYMHq31qAKCfvP1z++2f4++k6uHw+uuvR0RER0dHtU8NAPSzQ4cOxciRI9/x9qqHwwc+8IGIiHj55Zff9Y5PZwcPHoyOjo545ZVXoq2trd7jVN1g3y9i8O842PeLsONgMNj3izi9diylxKFDh2LMmDHvelzVw2HIkP/7somRI0cO+H9IfdXW1jaodxzs+0UM/h0H+34RdhwMBvt+EafPjpn/4PfiSAAgTTgAAGlVD4fm5uZYsGBBNDc3V/vUA8Zg33Gw7xcx+Hcc7PtF2HEwGOz7RQzOHRvKe73vAgDg//FUBQCQJhwAgDThAACkCQcAIK1X4fDII4/E+eefHy0tLTF58uTYsGHDux7/xBNPxCWXXBItLS0xYcKEWL16da+GrZVK9tu6dWt8/vOfj/PPPz8aGhpi6dKltRu0DyrZcdmyZXH11VfHGWecEWeccUZMnz79PR/zgaCSHZ988smYOHFijBo1KkaMGBGXX355/PSnP63htJWr9OvwbZ2dndHQ0BCf+9zn+nfAKqhkx1WrVkVDQ8MJl5aWlhpOW7lKH8M33ngjZs+eHe3t7dHc3BwXXXTRoPp+eu211570GDY0NMTMmTNrOHHlKn0cly5dGhdffHEMHz48Ojo64s4774x///vfNZq2CkqFOjs7S1NTU1mxYkXZunVrufXWW8uoUaPK/v37T3n8888/XxobG8tDDz1Utm3bVu69994ybNiwsmXLlkrvuiYq3W/Dhg3l7rvvLo8//ng5++yzy8MPP1zbgXuh0h1vvPHG8sgjj5RNmzaV7du3ly996Utl5MiR5e9//3uNJ8+rdMff//735cknnyzbtm0rO3fuLEuXLi2NjY3lmWeeqfHkOZXu97Y9e/aUc845p1x99dXluuuuq82wvVTpjitXrixtbW3l1Vdf7bns27evxlPnVbpfV1dXmThxYpkxY0Z57rnnyp49e8q6devK5s2bazx5XqU7vv766yc8fi+++GJpbGwsK1eurO3gFah0x8cee6w0NzeXxx57rOzZs6c8++yzpb29vdx55501nrz3Kg6HSZMmldmzZ/d8fPz48TJmzJiyaNGiUx5//fXXl5kzZ55w3eTJk8tXvvKVSu+6Jird7z+NHTv2tAiHvuxYSinHjh0rra2t5Sc/+Ul/jdhnfd2xlFKuuOKKcu+99/bHeH3Wm/2OHTtWpk6dWn784x+Xm2++ecCHQ6U7rly5sowcObJG0/Vdpfv94Ac/KOPGjStHjhyp1Yh91tevw4cffri0traWw4cP99eIfVbpjrNnzy6f+MQnTrjurrvuKldddVW/zllNFT1VceTIkdi4cWNMnz6957ohQ4bE9OnTY/369af8nPXr159wfETEpz/96Xc8vp56s9/ppho7vvXWW3H06NGeP2g20PR1x1JKrF27Nl566aX42Mc+1p+j9kpv97v//vvjrLPOii9/+cu1GLNPervj4cOHY+zYsdHR0RHXXXddbN26tRbjVqw3+/3617+OKVOmxOzZs2P06NHx4Q9/OB588ME4fvx4rcauSDW+1yxfvjxuuOGGGDFiRH+N2Se92XHq1KmxcePGnqczdu/eHatXr44ZM2bUZOZqqOiPXL322mtx/PjxGD169AnXjx49Onbs2HHKz9m3b98pj9+3b1+Fo/a/3ux3uqnGjvfcc0+MGTPmpCAcKHq744EDB+Kcc86Jrq6uaGxsjEcffTQ+9alP9fe4FevNfs8991wsX748Nm/eXIMJ+643O1588cWxYsWKuOyyy+LAgQOxZMmSmDp1amzdujXOPffcWoyd1pv9du/eHb/73e/ipptuitWrV8fOnTvjjjvuiKNHj8aCBQtqMXZF+vq9ZsOGDfHiiy/G8uXL+2vEPuvNjjfeeGO89tprMW3atCilxLFjx+L222+Pb37zm7UYuSqq/tcxGdwWL14cnZ2dsW7dugH/wrNKtba2xubNm+Pw4cOxdu3auOuuu2LcuHFx7bXX1nu0Pjl06FDMmjUrli1bFmeeeWa9x+k3U6ZMiSlTpvR8PHXq1Lj00kvjhz/8YSxcuLCOk1VHd3d3nHXWWfGjH/0oGhsb48orr4x//OMf8Z3vfGdAhkNfLV++PCZMmBCTJk2q9yhVtW7dunjwwQfj0UcfjcmTJ8fOnTvja1/7WixcuDDmz59f7/FSKgqHM888MxobG2P//v0nXL9///44++yzT/k5Z599dkXH11Nv9jvd9GXHJUuWxOLFi+O3v/1tXHbZZf05Zp/0dschQ4bEBRdcEBERl19+eWzfvj0WLVo04MKh0v127doVf/3rX+Mzn/lMz3Xd3d0RETF06NB46aWXYvz48f07dIWq8bU4bNiwuOKKK2Lnzp39MWKf9Ga/9vb2GDZsWDQ2NvZcd+mll8a+ffviyJEj0dTU1K8zV6ovj+Gbb74ZnZ2dcf/99/fniH3Wmx3nz58fs2bNiltuuSUiIiZMmBBvvvlm3HbbbTFv3rwYMmTg/18SKpqwqakprrzyyli7dm3Pdd3d3bF27doTSv8/TZky5YTjIyJ+85vfvOPx9dSb/U43vd3xoYceioULF8YzzzwTEydOrMWovVatx7G7uzu6urr6Y8Q+qXS/Sy65JLZs2RKbN2/uuXz2s5+Nj3/847F58+bo6Oio5fgp1XgMjx8/Hlu2bIn29vb+GrPXerPfVVddFTt37uyJvoiIP//5z9He3j7goiGib4/hE088EV1dXfHFL36xv8fsk97s+NZbb50UB2/HYDld/nRUpa+m7OzsLM3NzWXVqlVl27Zt5bbbbiujRo3qedvTrFmzyje+8Y2e459//vkydOjQsmTJkrJ9+/ayYMGCAf92zEr26+rqKps2bSqbNm0q7e3t5e677y6bNm0qf/nLX+q1wnuqdMfFixeXpqam8otf/OKEt0odOnSoXiu8p0p3fPDBB8uaNWvKrl27yrZt28qSJUvK0KFDy7Jly+q1wruqdL//3+nwropKd/zWt75Vnn322bJr166ycePGcsMNN5SWlpaydevWeq3wrird7+WXXy6tra3lq1/9annppZfKU089Vc4666zy7W9/u14rvKfe/ns6bdq08oUvfKHW4/ZKpTsuWLCgtLa2lscff7zs3r27rFmzpowfP75cf/319VqhYhWHQymlfO973yvnnXdeaWpqKpMmTSp/+MMfem675pprys0333zC8T//+c/LRRddVJqamsqHPvSh8vTTT/dp6P5WyX579uwpEXHS5Zprrqn94BWoZMexY8eecscFCxbUfvAKVLLjvHnzygUXXFBaWlrKGWecUaZMmVI6OzvrMHVepV+H/+l0CIdSKtvx61//es+xo0ePLjNmzCh/+tOf6jB1XqWP4QsvvFAmT55cmpuby7hx48oDDzxQjh07VuOpK1Ppjjt27CgRUdasWVPjSXuvkh2PHj1a7rvvvjJ+/PjS0tJSOjo6yh133FH+9a9/1X7wXvJntQGAtIH/KgwAYMAQDgBAmnAAANKEAwCQJhwAgDThAACkCQcAIE04AABpwgEASBMOAECacAAA0oQDcErd3d3x0EMPxQUXXBDNzc1x3nnnxQMPPBAREffcc09cdNFF8b73vS/GjRsX8+fPj6NHj9Z5YqAWhtZ7AGBgmjt3bixbtiwefvjhmDZtWrz66quxY8eOiIhobW2NVatWxZgxY2LLli1x6623Rmtra8yZM6fOUwP9zV/HBE5y6NCh+OAHPxjf//7345ZbbnnP45csWRKdnZ3xxz/+sQbTAfXkNw7ASbZv3x5dXV3xyU9+8pS3/+xnP4vvfve7sWvXrjh8+HAcO3Ys2traajwlUA9e4wCcZPjw4e942/r16+Omm26KGTNmxFNPPRWbNm2KefPmxZEjR2o4IVAvwgE4yYUXXhjDhw+PtWvXnnTbCy+8EGPHjo158+bFxIkT48ILL4y//e1vdZgSqAdPVQAnaWlpiXvuuSfmzJkTTU1NcdVVV8U///nP2Lp1a1x44YXx8ssvR2dnZ3zkIx+Jp59+On75y1/We2SgRrw4Ejil7u7uWLRoUSxbtiz27t0b7e3tcfvtt8fcuXNjzpw5sWLFiujq6oqZM2fGRz/60bjvvvvijTfeqPfYQD8TDgBAmtc4AABpwgEASBMOAECacAAA0oQDAJAmHACANOEAAKQJBwAgTTgAAGnCAQBIEw4AQNr/AS9c6DVDmUJrAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Analysing the 'thal' feature"
      ],
      "metadata": {
        "id": "dhvCITE1N28i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"thal\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i6HYfxwwN3LJ",
        "outputId": "a80ed9ca-98dc-4691-f63c-835a2cb4ae3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "source": [
        "# Import the necessary modules\n",
        "import seaborn as sns\n",
        "\n",
        "# Specify the data source for the y-axis values\n",
        "y = dataset[\"thal\"]\n",
        "\n",
        "# Create the bar plot\n",
        "sns.barplot(x=dataset[\"thal\"], y=y)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "HKVx_fBJOGF6",
        "outputId": "9440a277-0626-4fcc-8717-0991203b49fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='thal', ylabel='thal'>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "print(sns.barplot.__code__.co_argcount)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Huld8yPROHBV",
        "outputId": "e7c0ca30-da41-4b44-cd87-66d7ddaf9e45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "source": [
        "print(y)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QnPmHxexOHxD",
        "outputId": "594c34c8-ac7d-4066-af1f-42542d09ab18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      1\n",
            "1      2\n",
            "2      2\n",
            "3      2\n",
            "4      2\n",
            "      ..\n",
            "509    2\n",
            "510    2\n",
            "511    2\n",
            "512    2\n",
            "513    2\n",
            "Name: thal, Length: 514, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(dataset[\"thal\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "LFFxdqjeONtI",
        "outputId": "17941465-f701-4c11-b939-9fe24bed245c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='thal', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 78
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "sns.barplot(dataset[\"thal\"])"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "Rnh3VuiIOfWW",
        "outputId": "5c0ecc52-aed2-48b4-db25-b1239ff406bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='thal'>"
            ]
          },
          "metadata": {},
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "predictors = dataset.drop(\"target\",axis=1)\n",
        "target = dataset[\"target\"]\n",
        "\n",
        "X_train,X_test,Y_train,Y_test = train_test_split(predictors,target,test_size=0.20,random_state=0)"
      ],
      "metadata": {
        "id": "81AK8vGzOm4o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JVdB602PO4AC",
        "outputId": "947f4ead-675f-4125-a762-3def18d60b0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(411, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YzEYDbgOO6vW",
        "outputId": "15a2495a-cd9a-4cde-bff2-61e7166f981b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_k4vG7OUO-wM",
        "outputId": "32aea796-25c8-4096-ad8e-dc251df908db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(411,)"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oYkEhs5NO_0E",
        "outputId": "f6e21188-96fe-4d79-bf4b-9c6017ddd554"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "Nk5TOXNlPC29"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "lr = LogisticRegression()\n",
        "\n",
        "lr.fit(X_train,Y_train)\n",
        "\n",
        "Y_pred_lr = lr.predict(X_test)"
      ],
      "metadata": {
        "id": "91xd0WANPHZn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_lr.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0z1nOY2_PNDD",
        "outputId": "ccb7d3de-80a1-4193-fb19-7339761e895b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_lr = round(accuracy_score(Y_pred_lr,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Logistic Regression is: \"+str(score_lr)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKh3pjN_PPns",
        "outputId": "0fc71641-f06a-440e-e813-4e1c17f73a04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Logistic Regression is: 86.41 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import GaussianNB\n",
        "\n",
        "nb = GaussianNB()\n",
        "\n",
        "nb.fit(X_train,Y_train)\n",
        "\n",
        "Y_pred_nb = nb.predict(X_test)"
      ],
      "metadata": {
        "id": "nJOODEDrPVpe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_nb.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J2wDcCGEPZr7",
        "outputId": "b24e3f46-061d-4192-bb8c-e39d878d39d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_nb = round(accuracy_score(Y_pred_nb,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Naive Bayes is: \"+str(score_nb)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COTM2Y27Pc2_",
        "outputId": "17b5384d-aab7-425e-9bea-3c65309bd6e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Naive Bayes is: 89.32 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import svm\n",
        "\n",
        "sv = svm.SVC(kernel='linear')\n",
        "\n",
        "sv.fit(X_train, Y_train)\n",
        "\n",
        "Y_pred_svm = sv.predict(X_test)"
      ],
      "metadata": {
        "id": "Ta4lRDpBPhOD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_svm.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vA8yw90XPmMK",
        "outputId": "2ad0ea2d-1536-453d-da37-63d53186830f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_svm = round(accuracy_score(Y_pred_svm,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Linear SVM is: \"+str(score_svm)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JfTna6joPpaA",
        "outputId": "50921a1a-0857-48fe-ffed-46cefd51d556"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Linear SVM is: 86.41 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "knn = KNeighborsClassifier(n_neighbors=7)\n",
        "knn.fit(X_train,Y_train)\n",
        "Y_pred_knn=knn.predict(X_test)"
      ],
      "metadata": {
        "id": "nDS3CmowP6aU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_knn.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tTZkoiBGP-qb",
        "outputId": "4cade999-dece-409a-f16e-1c24db3cdfa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "score_knn = round(accuracy_score(Y_pred_knn,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using KNN is: \"+str(score_knn)+\" %\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gk-_IMWmQBMR",
        "outputId": "e2876d11-3cd6-4dcb-dac1-b77d0aa4f227"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using KNN is: 65.05 %\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "max_accuracy = 0\n",
        "\n",
        "\n",
        "for x in range(200):\n",
        "    dt = DecisionTreeClassifier(random_state=x)\n",
        "    dt.fit(X_train,Y_train)\n",
        "    Y_pred_dt = dt.predict(X_test)\n",
        "    current_accuracy = round(accuracy_score(Y_pred_dt,Y_test)*100,2)\n",
        "    if(current_accuracy>max_accuracy):\n",
        "        max_accuracy = current_accuracy\n",
        "        best_x = x\n",
        "\n",
        "        #print(max_accuracy)\n",
        "        #print(best_x)\n",
        "\n",
        "\n",
        "        dt = DecisionTreeClassifier(random_state=best_x)\n",
        "        dt.fit(X_train,Y_train)\n",
        "        Y_pred_dt = dt.predict(X_test)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "0myNDe9HQTKt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Y_pred_dt.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltLGmjz2QYRS",
        "outputId": "612c2865-0789-4740-b85d-c0c7e49224f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(103,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "score_dt = round(accuracy_score(Y_pred_dt,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gRZ9s383QfZL",
        "outputId": "d4036071-a80e-4b64-d89e-dbbd7599f30c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Decision Tree is: 83.5 %\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "max_accuracy = 0\n",
        "\n",
        "for x in range(2000):\n",
        "    rf = RandomForestClassifier(random_state=x)\n",
        "    rf.fit(X_train, Y_train)\n",
        "    Y_pred_rf = rf.predict(X_test)\n",
        "    current_accuracy = round(accuracy_score(Y_pred_rf, Y_test) * 100, 2)\n",
        "    if current_accuracy > max_accuracy:\n",
        "        max_accuracy = current_accuracy\n",
        "        best_x = x\n",
        "\n",
        "# Print the results\n",
        "print(f\"Maximum accuracy: {max_accuracy}\")\n",
        "print(f\"Best random state: {best_x}\")\n",
        "\n",
        "# Train the model with the best random state\n",
        "rf = RandomForestClassifier(random_state=best_x)\n",
        "rf.fit(X_train, Y_train)\n",
        "Y_pred_rf = rf.predict(X_test)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "25qKjzVtQzw9",
        "outputId": "d9137964-c268-4377-ae76-8655f848b265"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum accuracy: 93.2\n",
            "Best random state: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_rf.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8VE8AQnuQ_sd",
        "outputId": "a707a3ee-6178-4b2d-e851-84aba8d96c60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_rf = round(accuracy_score(Y_pred_rf,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Decision Tree is: \"+str(score_rf)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gmEylgm3RQa3",
        "outputId": "f4b8bd72-192f-48c7-db4e-1703dcc8bfd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Decision Tree is: 93.2 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "\n",
        "xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\n",
        "xgb_model.fit(X_train, Y_train)\n",
        "\n",
        "Y_pred_xgb = xgb_model.predict(X_test)"
      ],
      "metadata": {
        "id": "ozIooHxXSQZ0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_xgb.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67nLTxuIS3dY",
        "outputId": "5c8b7008-4743-4fe0-9166-b6081ab42886"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103,)"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "score_xgb = round(accuracy_score(Y_pred_xgb,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using XGBoost is: \"+str(score_xgb)+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j9fdDRoJTHUN",
        "outputId": "afd34cb0-275c-4595-f3fb-11b69e79b10b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using XGBoost is: 88.35 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense"
      ],
      "metadata": {
        "id": "jeGUHkXvTQRi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# https://stats.stackexchange.com/a/136542 helped a lot in avoiding overfitting\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Dense(11,activation='relu',input_dim=13))\n",
        "model.add(Dense(1,activation='sigmoid'))\n",
        "\n",
        "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "TbpJ7g2CTZxm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train,Y_train,epochs=300)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ILtni2AThzs",
        "outputId": "7480bfe2-61a5-475a-e519-b244d4e9d2dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "13/13 [==============================] - 2s 9ms/step - loss: 34.9904 - accuracy: 0.4550\n",
            "Epoch 2/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 26.9162 - accuracy: 0.4550\n",
            "Epoch 3/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 19.0608 - accuracy: 0.4550\n",
            "Epoch 4/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 10.8398 - accuracy: 0.4550\n",
            "Epoch 5/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 3.4390 - accuracy: 0.4842\n",
            "Epoch 6/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 2.7772 - accuracy: 0.5353\n",
            "Epoch 7/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 2.0233 - accuracy: 0.5547\n",
            "Epoch 8/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 1.7103 - accuracy: 0.5864\n",
            "Epoch 9/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 1.4465 - accuracy: 0.6375\n",
            "Epoch 10/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 1.3910 - accuracy: 0.6667\n",
            "Epoch 11/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 1.3445 - accuracy: 0.6496\n",
            "Epoch 12/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 1.2993 - accuracy: 0.6764\n",
            "Epoch 13/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 1.2610 - accuracy: 0.6764\n",
            "Epoch 14/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 1.2158 - accuracy: 0.6788\n",
            "Epoch 15/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 1.1758 - accuracy: 0.6910\n",
            "Epoch 16/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 1.1448 - accuracy: 0.6934\n",
            "Epoch 17/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 1.1127 - accuracy: 0.6983\n",
            "Epoch 18/300\n",
            "13/13 [==============================] - 0s 10ms/step - loss: 1.0851 - accuracy: 0.7007\n",
            "Epoch 19/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 1.0594 - accuracy: 0.7032\n",
            "Epoch 20/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 1.0482 - accuracy: 0.6983\n",
            "Epoch 21/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 1.0131 - accuracy: 0.6934\n",
            "Epoch 22/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 0.9811 - accuracy: 0.7007\n",
            "Epoch 23/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 0.9649 - accuracy: 0.6959\n",
            "Epoch 24/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.9515 - accuracy: 0.6934\n",
            "Epoch 25/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.9592 - accuracy: 0.6813\n",
            "Epoch 26/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.8979 - accuracy: 0.6715\n",
            "Epoch 27/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 0.8661 - accuracy: 0.7105\n",
            "Epoch 28/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.8769 - accuracy: 0.6934\n",
            "Epoch 29/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 0.8574 - accuracy: 0.7056\n",
            "Epoch 30/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.8571 - accuracy: 0.6594\n",
            "Epoch 31/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.8379 - accuracy: 0.7056\n",
            "Epoch 32/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.7789 - accuracy: 0.7251\n",
            "Epoch 33/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.7668 - accuracy: 0.7105\n",
            "Epoch 34/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 0.7423 - accuracy: 0.6861\n",
            "Epoch 35/300\n",
            "13/13 [==============================] - 0s 10ms/step - loss: 0.7338 - accuracy: 0.7129\n",
            "Epoch 36/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.7150 - accuracy: 0.7153\n",
            "Epoch 37/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.6903 - accuracy: 0.7129\n",
            "Epoch 38/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.6775 - accuracy: 0.7251\n",
            "Epoch 39/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.6561 - accuracy: 0.7105\n",
            "Epoch 40/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.6608 - accuracy: 0.7251\n",
            "Epoch 41/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.6299 - accuracy: 0.7348\n",
            "Epoch 42/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.6510 - accuracy: 0.7153\n",
            "Epoch 43/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.6089 - accuracy: 0.7518\n",
            "Epoch 44/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.6096 - accuracy: 0.7445\n",
            "Epoch 45/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.5829 - accuracy: 0.7567\n",
            "Epoch 46/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.5827 - accuracy: 0.7226\n",
            "Epoch 47/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.5916 - accuracy: 0.7445\n",
            "Epoch 48/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.5747 - accuracy: 0.7397\n",
            "Epoch 49/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.5550 - accuracy: 0.7421\n",
            "Epoch 50/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 0.5400 - accuracy: 0.7445\n",
            "Epoch 51/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.5302 - accuracy: 0.7591\n",
            "Epoch 52/300\n",
            "13/13 [==============================] - 0s 9ms/step - loss: 0.5289 - accuracy: 0.7494\n",
            "Epoch 53/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.5118 - accuracy: 0.7567\n",
            "Epoch 54/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.5119 - accuracy: 0.7518\n",
            "Epoch 55/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.5005 - accuracy: 0.7567\n",
            "Epoch 56/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.5080 - accuracy: 0.7567\n",
            "Epoch 57/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4834 - accuracy: 0.7567\n",
            "Epoch 58/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4784 - accuracy: 0.7737\n",
            "Epoch 59/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4792 - accuracy: 0.7786\n",
            "Epoch 60/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4759 - accuracy: 0.7664\n",
            "Epoch 61/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4557 - accuracy: 0.7981\n",
            "Epoch 62/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4711 - accuracy: 0.7786\n",
            "Epoch 63/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4509 - accuracy: 0.7810\n",
            "Epoch 64/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4540 - accuracy: 0.7810\n",
            "Epoch 65/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.4454 - accuracy: 0.7810\n",
            "Epoch 66/300\n",
            "13/13 [==============================] - 0s 8ms/step - loss: 0.4599 - accuracy: 0.7932\n",
            "Epoch 67/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4553 - accuracy: 0.7883\n",
            "Epoch 68/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4544 - accuracy: 0.7859\n",
            "Epoch 69/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4487 - accuracy: 0.7713\n",
            "Epoch 70/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4430 - accuracy: 0.7737\n",
            "Epoch 71/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.4318 - accuracy: 0.7859\n",
            "Epoch 72/300\n",
            "13/13 [==============================] - 0s 6ms/step - loss: 0.4385 - accuracy: 0.8005\n",
            "Epoch 73/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.4257 - accuracy: 0.8151\n",
            "Epoch 74/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4227 - accuracy: 0.8102\n",
            "Epoch 75/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4231 - accuracy: 0.8078\n",
            "Epoch 76/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4204 - accuracy: 0.8029\n",
            "Epoch 77/300\n",
            "13/13 [==============================] - 0s 7ms/step - loss: 0.4323 - accuracy: 0.7981\n",
            "Epoch 78/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4211 - accuracy: 0.7932\n",
            "Epoch 79/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4127 - accuracy: 0.7981\n",
            "Epoch 80/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4126 - accuracy: 0.8029\n",
            "Epoch 81/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4055 - accuracy: 0.8054\n",
            "Epoch 82/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4133 - accuracy: 0.8078\n",
            "Epoch 83/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4378 - accuracy: 0.7883\n",
            "Epoch 84/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4400 - accuracy: 0.7835\n",
            "Epoch 85/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4205 - accuracy: 0.8029\n",
            "Epoch 86/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4179 - accuracy: 0.7859\n",
            "Epoch 87/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4076 - accuracy: 0.8127\n",
            "Epoch 88/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4111 - accuracy: 0.8102\n",
            "Epoch 89/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4045 - accuracy: 0.8273\n",
            "Epoch 90/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3981 - accuracy: 0.8224\n",
            "Epoch 91/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4071 - accuracy: 0.8102\n",
            "Epoch 92/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4019 - accuracy: 0.8127\n",
            "Epoch 93/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4009 - accuracy: 0.8175\n",
            "Epoch 94/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4032 - accuracy: 0.8078\n",
            "Epoch 95/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4107 - accuracy: 0.8127\n",
            "Epoch 96/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4043 - accuracy: 0.8224\n",
            "Epoch 97/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3953 - accuracy: 0.8175\n",
            "Epoch 98/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3953 - accuracy: 0.8175\n",
            "Epoch 99/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3992 - accuracy: 0.8200\n",
            "Epoch 100/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3909 - accuracy: 0.8248\n",
            "Epoch 101/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3991 - accuracy: 0.8273\n",
            "Epoch 102/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3902 - accuracy: 0.8224\n",
            "Epoch 103/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4102 - accuracy: 0.8005\n",
            "Epoch 104/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4094 - accuracy: 0.8078\n",
            "Epoch 105/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4012 - accuracy: 0.8224\n",
            "Epoch 106/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3928 - accuracy: 0.8273\n",
            "Epoch 107/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4182 - accuracy: 0.8127\n",
            "Epoch 108/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4005 - accuracy: 0.8102\n",
            "Epoch 109/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3981 - accuracy: 0.8102\n",
            "Epoch 110/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3889 - accuracy: 0.8394\n",
            "Epoch 111/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3950 - accuracy: 0.8297\n",
            "Epoch 112/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3940 - accuracy: 0.8151\n",
            "Epoch 113/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3911 - accuracy: 0.8370\n",
            "Epoch 114/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3960 - accuracy: 0.8345\n",
            "Epoch 115/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4098 - accuracy: 0.8151\n",
            "Epoch 116/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4465 - accuracy: 0.8005\n",
            "Epoch 117/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3998 - accuracy: 0.8200\n",
            "Epoch 118/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3903 - accuracy: 0.8102\n",
            "Epoch 119/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3835 - accuracy: 0.8273\n",
            "Epoch 120/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3847 - accuracy: 0.8370\n",
            "Epoch 121/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3856 - accuracy: 0.8273\n",
            "Epoch 122/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3869 - accuracy: 0.8200\n",
            "Epoch 123/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3835 - accuracy: 0.8418\n",
            "Epoch 124/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3893 - accuracy: 0.8370\n",
            "Epoch 125/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3807 - accuracy: 0.8394\n",
            "Epoch 126/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4090 - accuracy: 0.7981\n",
            "Epoch 127/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3990 - accuracy: 0.8054\n",
            "Epoch 128/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3932 - accuracy: 0.8078\n",
            "Epoch 129/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3915 - accuracy: 0.8127\n",
            "Epoch 130/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3914 - accuracy: 0.8127\n",
            "Epoch 131/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3918 - accuracy: 0.8102\n",
            "Epoch 132/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3912 - accuracy: 0.8273\n",
            "Epoch 133/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3841 - accuracy: 0.8321\n",
            "Epoch 134/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3872 - accuracy: 0.8151\n",
            "Epoch 135/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3918 - accuracy: 0.8273\n",
            "Epoch 136/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3822 - accuracy: 0.8370\n",
            "Epoch 137/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3844 - accuracy: 0.8297\n",
            "Epoch 138/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3923 - accuracy: 0.8248\n",
            "Epoch 139/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3937 - accuracy: 0.8248\n",
            "Epoch 140/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3811 - accuracy: 0.8321\n",
            "Epoch 141/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3795 - accuracy: 0.8370\n",
            "Epoch 142/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3950 - accuracy: 0.8127\n",
            "Epoch 143/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3873 - accuracy: 0.8127\n",
            "Epoch 144/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4008 - accuracy: 0.8273\n",
            "Epoch 145/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3808 - accuracy: 0.8297\n",
            "Epoch 146/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3814 - accuracy: 0.8345\n",
            "Epoch 147/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3857 - accuracy: 0.8224\n",
            "Epoch 148/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3860 - accuracy: 0.8248\n",
            "Epoch 149/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3827 - accuracy: 0.8443\n",
            "Epoch 150/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4108 - accuracy: 0.8029\n",
            "Epoch 151/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4070 - accuracy: 0.8127\n",
            "Epoch 152/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3952 - accuracy: 0.8200\n",
            "Epoch 153/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3952 - accuracy: 0.8151\n",
            "Epoch 154/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3771 - accuracy: 0.8394\n",
            "Epoch 155/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3941 - accuracy: 0.8054\n",
            "Epoch 156/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4034 - accuracy: 0.8297\n",
            "Epoch 157/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3838 - accuracy: 0.8370\n",
            "Epoch 158/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3803 - accuracy: 0.8394\n",
            "Epoch 159/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3843 - accuracy: 0.8248\n",
            "Epoch 160/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3956 - accuracy: 0.8224\n",
            "Epoch 161/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3791 - accuracy: 0.8418\n",
            "Epoch 162/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3774 - accuracy: 0.8297\n",
            "Epoch 163/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3892 - accuracy: 0.8224\n",
            "Epoch 164/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3912 - accuracy: 0.8248\n",
            "Epoch 165/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3733 - accuracy: 0.8370\n",
            "Epoch 166/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3734 - accuracy: 0.8370\n",
            "Epoch 167/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3833 - accuracy: 0.8370\n",
            "Epoch 168/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3922 - accuracy: 0.8102\n",
            "Epoch 169/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3725 - accuracy: 0.8370\n",
            "Epoch 170/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3730 - accuracy: 0.8248\n",
            "Epoch 171/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4183 - accuracy: 0.8005\n",
            "Epoch 172/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3945 - accuracy: 0.8175\n",
            "Epoch 173/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3739 - accuracy: 0.8224\n",
            "Epoch 174/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3763 - accuracy: 0.8370\n",
            "Epoch 175/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3805 - accuracy: 0.8443\n",
            "Epoch 176/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4191 - accuracy: 0.8054\n",
            "Epoch 177/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.4078 - accuracy: 0.8127\n",
            "Epoch 178/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3951 - accuracy: 0.8345\n",
            "Epoch 179/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3896 - accuracy: 0.8200\n",
            "Epoch 180/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3714 - accuracy: 0.8370\n",
            "Epoch 181/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3967 - accuracy: 0.8078\n",
            "Epoch 182/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3839 - accuracy: 0.8394\n",
            "Epoch 183/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3790 - accuracy: 0.8345\n",
            "Epoch 184/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3766 - accuracy: 0.8224\n",
            "Epoch 185/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3728 - accuracy: 0.8370\n",
            "Epoch 186/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3784 - accuracy: 0.8297\n",
            "Epoch 187/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3786 - accuracy: 0.8394\n",
            "Epoch 188/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3935 - accuracy: 0.8273\n",
            "Epoch 189/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3991 - accuracy: 0.8005\n",
            "Epoch 190/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4188 - accuracy: 0.8102\n",
            "Epoch 191/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3750 - accuracy: 0.8394\n",
            "Epoch 192/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3727 - accuracy: 0.8297\n",
            "Epoch 193/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3745 - accuracy: 0.8370\n",
            "Epoch 194/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3700 - accuracy: 0.8418\n",
            "Epoch 195/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3872 - accuracy: 0.8273\n",
            "Epoch 196/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3710 - accuracy: 0.8345\n",
            "Epoch 197/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3677 - accuracy: 0.8321\n",
            "Epoch 198/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3685 - accuracy: 0.8491\n",
            "Epoch 199/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3927 - accuracy: 0.8248\n",
            "Epoch 200/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3863 - accuracy: 0.8151\n",
            "Epoch 201/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3712 - accuracy: 0.8200\n",
            "Epoch 202/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3792 - accuracy: 0.8370\n",
            "Epoch 203/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3916 - accuracy: 0.8151\n",
            "Epoch 204/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3943 - accuracy: 0.8102\n",
            "Epoch 205/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4146 - accuracy: 0.8078\n",
            "Epoch 206/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3678 - accuracy: 0.8418\n",
            "Epoch 207/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3798 - accuracy: 0.8345\n",
            "Epoch 208/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3658 - accuracy: 0.8418\n",
            "Epoch 209/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3806 - accuracy: 0.8418\n",
            "Epoch 210/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3810 - accuracy: 0.8297\n",
            "Epoch 211/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3859 - accuracy: 0.8127\n",
            "Epoch 212/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.4114 - accuracy: 0.8127\n",
            "Epoch 213/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3804 - accuracy: 0.8418\n",
            "Epoch 214/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3691 - accuracy: 0.8394\n",
            "Epoch 215/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4203 - accuracy: 0.8054\n",
            "Epoch 216/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3984 - accuracy: 0.8151\n",
            "Epoch 217/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4169 - accuracy: 0.8151\n",
            "Epoch 218/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3912 - accuracy: 0.8321\n",
            "Epoch 219/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3903 - accuracy: 0.8151\n",
            "Epoch 220/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4043 - accuracy: 0.8078\n",
            "Epoch 221/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3777 - accuracy: 0.8248\n",
            "Epoch 222/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3725 - accuracy: 0.8321\n",
            "Epoch 223/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3848 - accuracy: 0.8175\n",
            "Epoch 224/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3972 - accuracy: 0.8200\n",
            "Epoch 225/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3679 - accuracy: 0.8370\n",
            "Epoch 226/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3688 - accuracy: 0.8394\n",
            "Epoch 227/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3671 - accuracy: 0.8321\n",
            "Epoch 228/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3783 - accuracy: 0.8200\n",
            "Epoch 229/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3610 - accuracy: 0.8345\n",
            "Epoch 230/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3677 - accuracy: 0.8418\n",
            "Epoch 231/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3709 - accuracy: 0.8321\n",
            "Epoch 232/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3815 - accuracy: 0.8175\n",
            "Epoch 233/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3798 - accuracy: 0.8345\n",
            "Epoch 234/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4123 - accuracy: 0.7883\n",
            "Epoch 235/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3818 - accuracy: 0.8321\n",
            "Epoch 236/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3756 - accuracy: 0.8248\n",
            "Epoch 237/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3897 - accuracy: 0.8127\n",
            "Epoch 238/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3873 - accuracy: 0.8175\n",
            "Epoch 239/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4096 - accuracy: 0.8005\n",
            "Epoch 240/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3872 - accuracy: 0.8321\n",
            "Epoch 241/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3720 - accuracy: 0.8443\n",
            "Epoch 242/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3633 - accuracy: 0.8394\n",
            "Epoch 243/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3856 - accuracy: 0.8151\n",
            "Epoch 244/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3767 - accuracy: 0.8418\n",
            "Epoch 245/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3695 - accuracy: 0.8321\n",
            "Epoch 246/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3755 - accuracy: 0.8297\n",
            "Epoch 247/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3669 - accuracy: 0.8224\n",
            "Epoch 248/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3634 - accuracy: 0.8394\n",
            "Epoch 249/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3937 - accuracy: 0.8200\n",
            "Epoch 250/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3866 - accuracy: 0.8321\n",
            "Epoch 251/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3795 - accuracy: 0.8370\n",
            "Epoch 252/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3624 - accuracy: 0.8370\n",
            "Epoch 253/300\n",
            "13/13 [==============================] - 0s 2ms/step - loss: 0.3648 - accuracy: 0.8491\n",
            "Epoch 254/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3832 - accuracy: 0.8224\n",
            "Epoch 255/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3861 - accuracy: 0.8248\n",
            "Epoch 256/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3704 - accuracy: 0.8370\n",
            "Epoch 257/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3824 - accuracy: 0.8200\n",
            "Epoch 258/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3858 - accuracy: 0.8345\n",
            "Epoch 259/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3828 - accuracy: 0.8321\n",
            "Epoch 260/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3776 - accuracy: 0.8248\n",
            "Epoch 261/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3684 - accuracy: 0.8321\n",
            "Epoch 262/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3763 - accuracy: 0.8248\n",
            "Epoch 263/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.4015 - accuracy: 0.8297\n",
            "Epoch 264/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3649 - accuracy: 0.8297\n",
            "Epoch 265/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.3810 - accuracy: 0.8151\n",
            "Epoch 266/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3612 - accuracy: 0.8443\n",
            "Epoch 267/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3656 - accuracy: 0.8516\n",
            "Epoch 268/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3613 - accuracy: 0.8297\n",
            "Epoch 269/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3608 - accuracy: 0.8443\n",
            "Epoch 270/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.3617 - accuracy: 0.8370\n",
            "Epoch 271/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3653 - accuracy: 0.8370\n",
            "Epoch 272/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3727 - accuracy: 0.8418\n",
            "Epoch 273/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3693 - accuracy: 0.8394\n",
            "Epoch 274/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3862 - accuracy: 0.8224\n",
            "Epoch 275/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3977 - accuracy: 0.8345\n",
            "Epoch 276/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3659 - accuracy: 0.8297\n",
            "Epoch 277/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3613 - accuracy: 0.8394\n",
            "Epoch 278/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3694 - accuracy: 0.8321\n",
            "Epoch 279/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3709 - accuracy: 0.8467\n",
            "Epoch 280/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3645 - accuracy: 0.8394\n",
            "Epoch 281/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3620 - accuracy: 0.8443\n",
            "Epoch 282/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3681 - accuracy: 0.8200\n",
            "Epoch 283/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3645 - accuracy: 0.8394\n",
            "Epoch 284/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3757 - accuracy: 0.8248\n",
            "Epoch 285/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3649 - accuracy: 0.8418\n",
            "Epoch 286/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3734 - accuracy: 0.8345\n",
            "Epoch 287/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3687 - accuracy: 0.8394\n",
            "Epoch 288/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3759 - accuracy: 0.8321\n",
            "Epoch 289/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3689 - accuracy: 0.8224\n",
            "Epoch 290/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3620 - accuracy: 0.8345\n",
            "Epoch 291/300\n",
            "13/13 [==============================] - 0s 5ms/step - loss: 0.3791 - accuracy: 0.8200\n",
            "Epoch 292/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3767 - accuracy: 0.8200\n",
            "Epoch 293/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3871 - accuracy: 0.8297\n",
            "Epoch 294/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3754 - accuracy: 0.8273\n",
            "Epoch 295/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3741 - accuracy: 0.8345\n",
            "Epoch 296/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3790 - accuracy: 0.8151\n",
            "Epoch 297/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3930 - accuracy: 0.8248\n",
            "Epoch 298/300\n",
            "13/13 [==============================] - 0s 4ms/step - loss: 0.3589 - accuracy: 0.8345\n",
            "Epoch 299/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3728 - accuracy: 0.8175\n",
            "Epoch 300/300\n",
            "13/13 [==============================] - 0s 3ms/step - loss: 0.3885 - accuracy: 0.8224\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7c2af41521d0>"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_nn = model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d32dPc6BTiGI",
        "outputId": "a277d878-63ab-436e-9551-79a01c473505"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 [==============================] - 0s 5ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_nn.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4DmXi86QTzBl",
        "outputId": "e70f7fef-09b7-4a2c-d63b-3754bcbac0d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(103, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rounded = [round(x[0]) for x in Y_pred_nn]\n",
        "\n",
        "Y_pred_nn = rounded"
      ],
      "metadata": {
        "id": "DRwePRdvT97z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score_nn = round(accuracy_score(Y_pred_nn,Y_test)*100,2)\n",
        "\n",
        "print(\"The accuracy score achieved using Neural Network is: \"+str(score_nn)+\" %\")\n",
        "\n",
        "#Note: Accuracy of 85% can be achieved on the test set, by setting epochs=2000, and number of nodes = 11."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7PMaSEXfUNBp",
        "outputId": "aa2931c4-ceb3-473f-de98-556b10874c4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Neural Network is: 76.7 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores = [score_lr,score_nb,score_svm,score_knn,score_dt,score_rf,score_xgb,score_nn]\n",
        "algorithms = [\"Logistic Regression\",\"Naive Bayes\",\"Support Vector Machine\",\"K-Nearest Neighbors\",\"Decision Tree\",\"Random Forest\",\"XGBoost\",\"Neural Network\"]\n",
        "\n",
        "for i in range(len(algorithms)):\n",
        "    print(\"The accuracy score achieved using \"+algorithms[i]+\" is: \"+str(scores[i])+\" %\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iGChifTHUkkK",
        "outputId": "bfc8ed47-3907-4ce0-8934-58f7ca158650"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy score achieved using Logistic Regression is: 86.41 %\n",
            "The accuracy score achieved using Naive Bayes is: 89.32 %\n",
            "The accuracy score achieved using Support Vector Machine is: 86.41 %\n",
            "The accuracy score achieved using K-Nearest Neighbors is: 65.05 %\n",
            "The accuracy score achieved using Decision Tree is: 83.5 %\n",
            "The accuracy score achieved using Random Forest is: 93.2 %\n",
            "The accuracy score achieved using XGBoost is: 88.35 %\n",
            "The accuracy score achieved using Neural Network is: 76.7 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set(rc={'figure.figsize':(15,8)})\n",
        "plt.xlabel(\"Algorithms\")\n",
        "plt.ylabel(\"Accuracy score\")\n",
        "\n",
        "sns.barplot(algorithms,scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 575
        },
        "id": "RCRO-lqDU5Zs",
        "outputId": "f4ba1483-4149-4030-826d-7e42c5d56b23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "barplot() takes from 0 to 1 positional arguments but 2 were given",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-122-ab65e036a009>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy score\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbarplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malgorithms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: barplot() takes from 0 to 1 positional arguments but 2 were given"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "EshsMcnJVHIs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "print(algorithms)\n",
        "print(scores)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "Lg80hsXGVHcG",
        "outputId": "67c8401b-fa26-4044-c176-fe8de3d0a0ac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Logistic Regression', 'Naive Bayes', 'Support Vector Machine', 'K-Nearest Neighbors', 'Decision Tree', 'Random Forest', 'XGBoost', 'Neural Network']\n",
            "[86.41, 89.32, 86.41, 65.05, 83.5, 93.2, 88.35, 76.7]\n"
          ]
        }
      ]
    },
    {
      "source": [
        "sns.barplot(x=algorithms, y=scores)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "C2VXqaclVIyg",
        "outputId": "3a4e7ac2-f42c-46b1-d15a-b790c0838458",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 378
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 125
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "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NW/ePL744ouMcR9//HEUFBTEO++8U6nl/lj2/9Lf9uKLL272ZdfY7EvcSrRo0SIee+yx2HPPPSs8z7hx42LbbbeN/fffP2P4Y489Fj/5yU+qpVwjR46MZs2axaJFi+KZZ56J6667LpYvXx79+vWrlu//MRkwYEAsWbJkSxejSqZMmRLvvPNOFBcXV/m7xo0bF3l5edVQqoq78MILo7i4OEpKSuKrr76KMWPGRL9+/eLZZ5+NnJyczVqWqpo4cWKMHj06Tj/99Bg8eHCkUqn47LPP4rnnnotvv/02GjVqtKWLuNHW1fasad99942mTZvG888/H8ccc0yZ8W+99VbMmTMnevToUW3leuCBB6Jjx47RoUOHavvO9dl2221j8uTJceihh2YMnzRpUmy77bZbtD2pWbNm3HTTTenPN954Y9x3330xfPjw6NWr13rnnTRpUgwaNCh22223TV3MzaIi9XVtt99+e7Rt27bKy96YY/v/om222Sbuv//+iIj4/vvvY9q0afHYY4/F448/Hr/+9a/LbUOqqrLHuM3ZRxg3blzGSfOgQYNi//33j759+6aH7bTTTpulLD82a9aVb7/9NiZMmBDnnHNOPPzww5Xax5Pk7rvvjrp166Y/Z2f/eK41+Pjjj2PcuHFxyimnRO3atbd0cTabq666Krp37x4TJkyIwYMHR8QPf/S78soro3nz5vGLX/wiIiK+/PLL6NOnT6xatSpOO+20KCwsjKysrPjXv/4Vjz76aHzwwQfx2GOPZXz3j62vvDHH2K1ddZ5v/disXr06JkyYENdff32Vv+t/df9fk/BrHerUqRNFRUXV8l3V9T0REXvttVcUFhZGRET79u3jo48+iqeeemqzhV/Lli2LbbbZZrMsa2s/0dt2223jpz/9adx+++3V0hg3b968GkpVObvvvnu6/u6///5Rp06dGDhwYPznP/+Jn/70p5u9PFXx4IMPxnHHHZfxl+EOHTrEWWedFSUlJVuwZBuvsvtjacdv3rx50aBBg4xxkyZNikaNGkW7du2qu5jVZkO/9/DDD48//vGPMXz48KhVq1ZE/HAy9re//S26d+8ezz777OYqahnZ2dmx9957R0TELbfcEnfffXdcddVVceKJJ653vj322COWLVsWEyZMiOuuu25zFLVcm7PtX1txcXG88847MWXKlGjdunWVvqs6j+1bwubaDtnZ2RnrqX379vGLX/wi+vXrF5dffnnsv//+0aRJk2pdZmWPcZuzj7B22XJzc2P77bdfb13akvvM5rR2Xdlvv/2iQ4cO8cwzz/xPnXyvqUWLFtGwYcNq+74VK1ZEjRo1flQh2tZmt912i/79+8cdd9wR3bt3j2bNmsWDDz4Yn3zySTz55JPpdXvRRRfFqlWr4qmnnoodd9wxPX/btm2jd+/e5fYjktRX3hpV9/nWxtpUbX5xcXE899xzMXDgwGo/7m4Jy5Yt26LLT1wr+umnn8aZZ54ZRUVFccABB8TgwYPjv//9b8Y0ixYtiqFDh0arVq2ibdu2cfPNN8e9996bcUtMebc4PPnkk9GtW7do2bJl+tLuDz/8MCIiPe+oUaPSl7+WXopY3m2Pr776apx00kmx3377xYEHHhinnXZafPTRR5X6rdnZ2VFQUBDffPNNxvBZs2bF0KFDo7i4OFq2bBmnnHJK/POf/8yYZsWKFXHttdfGQQcdFK1bt44rr7wynnvuuSgoKEhf0lt6SeLTTz8dv/rVr6K4uDh9hcKKFSvi5ptvjk6dOsW+++4bXbp0ieeeey5jGZ999lmcffbZUVxcHPvtt1907tw5Jk6cWOHx5d3SUJHtW1BQEBMnToyxY8dGu3btori4OC677LItctXHgAED4u23317v5cdLliyJESNGROfOnWO//faLww47LK688spYtGhRxnRr3hLy9NNPR/PmzeP//u//MqaZP39+7LvvvvHoo4+mh33wwQfRu3fv9Dq76KKLNvo2v+222y4iIlatWpUe9uqrr8YZZ5wRbdu2jf333z969eqVcevZ3LlzY999943HH3+8zPf16tUrzj///PTnitTdl19+OXr27BmtWrWK1q1bR8+ePSt0i8XChQtjhx12KHfcmh3K8vbX++67r9z24bXXXotBgwZFUVFRHHzwwTFhwoSM+Upv1f7www/j+OOPj8LCwujSpUu88sorZcrw6KOPRufOnWPfffeNww47LG6//faMUK70EukPPvggzjjjjCgqKkq3NxHltz1r69GjR6xcubLMZcbLly+PP/7xj9G1a9f0Xymffvrp6NGjRxQWFsYhhxwSt9xyS5lbrGfPnh2XXHJJtGvXLlq2bBlHHXVU+gqAww47LGbOnBkPP/xwulylt6iVlJTE7bffHocddljsu+++cdRRR2XU2bXX3YknnhiFhYXx8MMPl/u7Sh166KGRlZWVUR8mT54cu+22W7Ro0aLM9DfddFP06NEjWrVqFYccckhceOGF8e2335aZriLt9cKFC+Oiiy6KVq1aRadOnTLastJ13L179xg7dmxMmDAhevToEcOHD4+PPvoozjrrrCgqKoqf/exn8cwzz2TMV7NmzejYsWM8/fTTUVhYGG3atImrrrqq3NvdK7L/PPPMM3HyySfHQQcdlP4tpcexUutb959//nmce+65ccABB0RRUVH069cvvvrqq4z5N/ZYuS4dOnSIFi1axPjx49c7XcQP26pXr17RsmXL9Lpas+0v79hekT5BqQ1t51KvvfZadO/ePQoLC6Nnz54xderUjPFV3QfuuuuuOPLII9N14vTTT48ZM2ZscP1URa1ateKKK66IlStXlrlVt6rtRUTZ2x63pj7CutrniIrtlxVdh1uDHXfcMRo2bJix3r/99tu47LLL4vDDD4+WLVvGz372s7j55pvL3IJW0W3z/vvvR8+ePaOwsDC6d+++zj7AH/7whzjmmGOisLAwDj744Bg5cmQsX748Pb60PXj99dfj/PPPj1atWkXHjh3T/dnSq5cPOuiguPzyy8uUd2PMnDkzBg8enG5DzzzzzPj0008zpindFyZOnBidOnWKli1bxvz58yNiw/Vk4cKF8atf/SoOOeSQKCwsjA4dOsSQIUPS81522WUR8UOYU1BQ8KO9LWxTOPvss2PXXXeNq6++Or755pu47bbb4tRTT02H21OmTIl//OMfce6552YEX6Vyc3Pj+OOP3+ByyusrR2y4nxdRsTasuo+xSVCR862IH/aPq6++Og4++ODYd999o2fPnvHXv/41Y5rybsH/05/+VOFz5A2dF1XW8ccfHw0bNow777xzg9Our31Y1/6/YsWK2G+//TKO66V9oDX73Y8++mgccMAB6e+r7r78v/71r2jTpk1cdtllm/SihERd+fXNN9/EqaeeGk2aNIkbb7wxli9fHrfcckuceuqp8eyzz0adOnUiIuKyyy6Lt99+Oy6++OLYZZdd4vHHH49//etf6/3uv/3tb3H55ZdH3759o0OHDrFs2bL48MMP0wHFY489FieeeGKcdtpp6c7YutL+yZMnx4UXXhiHH354jB49OmrWrBnvv/9+zJ49u9J/+fzvf/8bu+66a/rzggUL4he/+EVsu+22ccUVV0TdunXjwQcfjD59+sQf/vCH9K1do0ePjkcffTQGDx4c++yzT7z00ksxevTocpdx8803R4cOHWL06NHpynj++efH+++/HwMHDow999wzXnvttbj44osjLy8vfYvTOeecE9tvv338+te/jjp16sRXX30Vs2bNSn/vhsavraLbNyLi4YcfjgMOOCCuv/76+OKLL2LUqFHRqFGjGDp0aKXWb1V16tQpmjdvHuPHj1/nc9+WLVsWq1evjiFDhkTDhg3jm2++iQkTJsSAAQPiwQcfLHeeI488Mq666qp48cUX49RTT00P/8Mf/hAREUcddVRE/BB8nXbaadGhQ4e45ZZbYunSpXHrrbfGgAEDyly2XZ6SkpJYtWpVlJSUxIwZM2LcuHHRrFmz2GuvvdLTfP3119GpU6fo27dvZGdnx1/+8pfo169f3H///VFcXBwNGzaMI488Mp566qk44YQT0vN99tln8eGHH6YvP69I3f3qq6/i/PPPj27dusVFF10UJSUl8cknn8SCBQs2+FtatGgRjz76aOy6667RsWPHaNy48Qbn2ZArrrgiunXrFmPHjo0333wzbrnllqhXr16cfPLJ6WlWrlwZQ4YMib59+8auu+4ajzzySAwaNCh9shTxw1Vp1157bZx22mnRsWPH+OCDD2LcuHGxaNGiuPTSSzOWedFFF8WJJ54Y/fv3j9q1a8fRRx9d4bZn9913j8LCwpg0aVJGGV999dVYvHhx+pbH3/zmN3HjjTdGnz59YtiwYfH555+nD6Cl+9C8efPSVy0NGTIkdt111/jyyy/TQci4ceOiX79+GbcGlV6pMWrUqHjggQfi3HPPjVatWsWrr74aV111VaxatSqjPq9cuTIuuuiiOP3002PIkCFRv3799W6P3NzcOPLII2PSpEnxs5/9LCJ+uKJtXc8FmjNnTvTv3z922GGHmDt3bvzmN7+J0047LZ5//vmoUeOHw2NF2+urrroqjjnmmBg/fnz86U9/iptuuikKCgoybsGcO3dujBs3Li677LLIy8uL5557LoYOHRonnHBCnHHGGfH444/HsGHDorCwMH1b3qJFi+Kxxx6LWrVqxUEHHRRHHXVUjB49OmrUqBG77757+rsr2vZ//fXXceyxx8Zuu+0WK1asiOeffz5OOeWUePbZZ6Np06brXfczZsyIk046Kfbaa6+4/vrrIysrKyZMmBCnn356vPjii5Gbm1utx8o1DRgwIAYOHBhTp05d59U2L774YgwZMiR69uwZ5513Xnz33XcxevToWLhwYdxyyy3r/O7K9Akqsp2/++67GD58eJx33nmRl5cXEydOjDPPPDNjO1RlH3jmmWfitttui8GDB0dRUVEsWrQo3nvvvfj+++83uB6r6qc//WnsuOOO8cEHH6SHVUd7UZ6tsY+wdvtc0f2yIutwa/H999/HggULMvqm8+bNi/r166fbvi+++CLGjh0b3333XYwcOTJj/g1tm++++y7OPPPMKCgoiFtvvTUWLlwYw4cPjyVLlsQ+++yT/p6XX345Bg8enO4vTJ8+PW655Zb45ptvYsyYMRnLvPrqq+O4446LE044IR5//PG45JJL4pNPPonPPvsshg8fHjNmzIjrr78+mjRpEuecc84G10Fp36lUTk5OZGVlxeLFi+O0006L7Ozs9BXKd9xxR7qO7rzzzul5/vCHP8Tuu+8el19+eWRnZ8e2225boXoycuTIeP311+Oiiy6KXXbZJb777rv0iXfHjh3j3HPPjTvuuCN9a2Zubm5FN+1WLzc3N66++uro06dPnHLKKZGXl5fug0ZEOiQ6+OCDK/W9FekrV6SfV5E2bFMdY7d2FTnfWrFiRZxxxhkxZ86cuOCCC2LHHXeMZ599Nvr375/RJ6+M8s6RN3ReVFm5ublx1llnxY033hgDBgxY56OUNtQ+rGv/z83NjZYtW8aUKVPSAd67774btWrVir/97W/p56n97W9/i1atWqX/SF6dffn33nsv+vfvH8cee2xcfvnlkZWVVen1VGGprciYMWNSRUVF6xx/3XXXpYqKilLz5s1LD/v3v/+dKigoSD3wwAOpVCqV+uyzz1L5+fmp3/3ud+lpVq9enfrZz36Wys/PTw97++23U/n5+akPP/wwlUqlUnfffXfqoIMOWm/58vPzU3ffffd6h5eUlKQOPfTQVN++fTf4e9dUWp6pU6emVq5cmZo7d27q7rvvThUUFKSef/759HS33XZb6oADDkj93//9X3rY8uXLUx07dkzdcMMNqVQqlZo3b16qsLAwNW7cuIxl9OnTJ5Wfn5+aMWNGKpVKpWbMmJHKz89PnXnmmRnTvfXWW6n8/PzU66+/njH8ggsuSP385z9PpVKp1Jw5c1L5+fmpl19+udzfs6HxqVQqdemll6a6deuW/lyR7ZtK/bC+jz/++DLfdcQRR6xzWdVtzbr60ksvpfLz81N///vfU6lUKnXttdemOnXqtM55V65cmZoyZUoqPz8/NX369PTwTp06pYYPH57+PHDgwNSJJ56YMe9pp52W6tevX/rzKaeckjrxxBNTJSUl6WGfffZZqqCgIPXqq6+uswyl237tfx07dkx99tln65xv9erVqZUrV6b69u2buvDCC9PD33zzzVR+fn7q3//+d3rYyJEjUx06dEitXr06lUpVrO6+8MILqfz8/NSiRYvWWYZ1+fTTT1NHHnlk+rccdthhqWuuuSZd30uVtx//5je/Kbd9uPjiizOmu/jii1OHHHJI+jeNGTMmlZ+fn3riiSfS06xatSp12GGHpYYMGZL+XFxcnP5cavTo0akWLVqk5s6dm0qlUqmnnnoqlZ+fn7rzzjvL/LZ1tT3lue+++1IFBQWp//73v+lh5513Xnr/WLRoUaqoqCg1evTojPl++9vfplq2bJkuz80335zad999y6y/Na1dZ1OpH/b9Fi1apG666aaM4RdeeGGqTZs2qVWrVqVSqf+/7tZs39altL6+8MILqb/+9a+pli1bphYvXpz68ssv0/vR2ttwbatWrUrNmjUro22rSHtdWhdK62jpfJ06dUr98pe/zPgt+fn5qcsvvzyVSv3/7fnQQw+l5/v+++9T++23X2r8+PGpVCqVuuSSS1LNmzdPXXjhhal777031aJFi9Q333yTeu2111L5+fmpnj17puetyP6zttL9tXPnzhnbe13r/pJLLkkdfvjhqWXLlqWHzZkzJ1VUVJT+HVU5Vq5v2pKSklSPHj1SZ511ViqVSqUWLFiQys/PTz311FOpVOr/r/M1251UKpV67bXXUgUFBalp06alUqmyx/bK9gnWt51TqR+ONfn5+ak333wzPWzhwoWpVq1apet8VfeB4cOHp4477rgKrb+NsaG+1gknnJA66qijUqnUpmsvfux9hLXbtnW1zxXZLyu6Dn+MSuvKypUrUytXrkzNnDkzdcEFF6QOPPDA1Oeff77O+VauXJl69tlnU82bN08tWbIkPbwi2+bGG29MtWrVKrVw4cL0sNI+xqWXXpoeduyxx5bpIz366KOp/Pz81CeffJJKpf7/fj1q1Kj0NAsXLkzts88+qQ4dOqRWrFiRHn7eeeeljjnmmPWuj9J6sPa/0jb9/vvvTxUUFGT0hebNm5cqKipKjRw5Mj2sU6dOqYMOOij1/fffp4dVtJ5069Yt47vWVcY5c+as97ckWe/evVP5+fmpZ599NmP4lVdemcrPz08tX748Y/iqVavSdXzlypXp4RXtK1e0n1eRNqy6j7Fbu8qcbz355JOp5s2blzmP6dWrV2rw4MHpz+X1Xf/4xz9W6Bx5bes6L6rIfrhm33bp0qWpdu3apa666qpUKpVKffTRR6n8/PzU22+/nUqlKt4+rGu5t912W3pdlZSUpA488MDUiBEjUu3bt09Pc+ihh6YmTJiQSqWq3o9Z87e98cYb5ZZ9U0nUbY9TpkyJ4uLijERxzz33jL333jvee++9iIj0rQ6HH354eprs7Ozo1KnTer+7efPmMX/+/Bg2bFi88cYbG/2WhOnTp8esWbPi5z//+UbNf8IJJ0SLFi2iTZs2MWrUqDj77LOja9eu6fFvvPFGFBcXR7169WLVqlWxatWqyM7OjgMPPDD926dNmxbLly/PWAcRUeZzqY4dO2Z8fuONN6J+/frRpk2b9DJWrVoV7dq1i48//jhWr14dDRo0iF122SVuvvnm+N3vflfmr7UbGl+eimzfUms/t2jPPfes0DI2hSOPPDLy8/PXe8vOM888E8cee2y0atUqWrRokX7w5tpv91hTt27dYurUqenLoUufbdStW7eIiFi6dGm8//77cdRRR8Xq1avT22mPPfaInXfeuUJvOxs6dGg8+eST8cQTT8T48eNjhx12iLPOOitmz56dnmbWrFlx6aWXxiGHHBLNmzePFi1axF//+tf4z3/+k56mTZs20aRJk3jyyScj4odLwZ999tk47rjj0rccVqTuFhQURE5OTgwdOjT+/Oc/l7k1dH3y8/Nj0qRJcdddd0Xv3r3Tf4E/+uij4+OPP67w96zpyCOPzPjcuXPnmD17dpm6tuZ0OTk5ccQRR8Tf//73iPihTZg3b176ar1SXbt2jZUrV5a5JW3t/bGyunbtGtnZ2TF58uSIiFi8eHG8+uqr6b8QfvDBB7FkyZI46qijyuzfy5Yti88++ywifnhAfps2bTL+ul8RH374YaxcubLM7+3SpUvMnTu3TJ2v7MPy27RpE9ttt1386U9/ikmTJkWLFi0yrmha02uvvRYnnXRSHHDAAdG8efP01TulZahMe73mX4qzsrLKtDk5OTlRu3btmDRpUkZ7dfDBB6f3z9zc3Nh5553T8y1evDhWrVoVXbp0ieOPPz7q1q0bEyZMiIMOOigiIuNKn4rsPxE/3LY4cODAaNeuXeyzzz7RokWL+M9//lNuW7P2un/jjTfisMMOi5ycnPQy8vLyonnz5unbuKrrWLm2rKysOPfcc+Mvf/lLuW3Xf/7zn5g5c2Z06dIlo94edNBBkZ2dXe5tZhGV7xNsaDtHRNStWzfj4fx169aNdu3apff5qu4DzZs3j48++ihGjhwZU6ZMiZUrV5Zb1k0llUql/yq7qdqLrbWPUF5/aUP7ZUXX4Y/VkiVLokWLFtGiRYvo1KlTvPTSSzFq1Kho1qxZeppUKhX33XdfdO3aNVq2bBktWrSIoUOHxqpVq8rcrruhbfP3v/89iouLMx4o37Zt24zt/v3338fHH38cnTt3zviu0v7y2vWhffv26f+vW7duNGzYMFq3bh01a9ZMD99jjz3KPGZkXe6777548skn0/9Kb5WbMmVK7LXXXhkv3Khfv360a9euTJmKi4tj2223TX+uaD1p3rx5/O53v4t77rknpk2bVqHy/i/597//He+9915kZWXFu+++W6F5jjnmmHQdb9GiRZk39G2or1zRfl5F2rBNdYxNgg2db73xxhuRn58fe+yxR5l9qLJvgC5VXp+8IudFlbXNNtvEGWecEU899VTGOVipqh5HDjzwwJg5c2bMmjUrPv300/j+++/jrLPOijlz5sT06dNjxowZMWvWrPRzV6urL//qq69G//7945xzzokLL7ywEmtk4yXqtseFCxdmXPJcqlGjRunbor777ruoWbNmxkEzIjb4YMq2bdumL+8788wzo1atWtG5c+f45S9/ucFbcdZUes/+up49tCE33HBD7LnnnjF37ty48847Y+LEiXHggQemT9rmzZsXU6dOLff5NqW3HH333XcREWUeeL2ut92tPXzevHkxf/78cpdR+v077bRT3HPPPXHLLbfEiBEj0p2jyy67LA488MDIyspa7/jyVGT7llr7jVE1a9aslmc1bIysrKz0Tl3erTR//OMf49JLL40TTzwxfTnod999FwMHDsx4NsXaOnXqFLVr147nn38+zj777HjhhReiVq1accQRR0TED+tr9erVMXLkyDK3FUREhTpxTZo0Sb9gIeKHB3m2b98+7rvvvrj00kujpKQkzj333Fi0aFEMHjw4dt9996hdu3aMGTMm4/uzsrKiV69e8cADD8RFF10Ur776asydOzd69uyZnqYidbdp06YxYcKEuPPOO2PQoEGRnZ0dBx98cFx55ZUVeqNqbm5udOjQId0Iv/7669G/f/8YP358jBs3boPzr23tdmP77bePiB/2gdLy1KxZM+rVq5cxXaNGjdL7YWndXXs/K/28dt0uXcbGaty4cRQXF8ekSZPizDPPjD/+8Y+xfPny9C2P8+bNi4iI4447rtz5S7fr/PnzMy7pr6jS37P27yj9XNpGRkTUrl07/eyMisrJyYkuXbrE888/HzNnzlxncPXhhx/GgAED4vDDD4+zzz47GjVqFFlZWXHCCSek97vKtNdrH1Nq1qxZJpzdeeedo1atWnHOOefEGWeckZ7vyCOPzHgteuktCqVt1sCBA9PjHnnkkXjkkUcyxkdUbP9ZvHhx9O3bNxo2bBjDhg2Ln/zkJ1GrVq341a9+VaatKW/dz5s3L+6///6M5zSt+Xsjqu9YWZ7OnTunH2p7ww03lClbROa6WtO62rvK9gkqsp3Lm7dRo0bx+eefR0TV94GePXvG999/H48//njcd999Ubdu3Tj22GNj6NChm+UB67NmzYo99tgjIjZde7G19hHW3qYV2S8rug5/rLbZZpt46KGHIpVKxRdffBGjR4+OSy+9NJ577rl023n//ffHDTfcEGeddVYUFxdHXl5e/OMf/4gRI0aUaXs2tG2+++67jFu+S6253y1atChSqVSZ42rpbT5r14e19+vc3Nwq1ZGCgoJy24GFCxeWewxv1KhRmZPT8vreERuuJ1dccUXUq1cvfvOb38SoUaNi5513jn79+qX/qPq/LJVKxdVXXx277757/OIXv4hrrrkmfv7zn6dvpS+tr7Nnz854sPgtt9wSy5Yti1dffbXcvuKG+soV7edVpA3blMfYrd2GzrfmzZsXH330Ubnt8ca+lXPtbVrR86KNcfLJJ8fEiRNj4sSJZfq2VT2OFBUVRc2aNePdd9+NhQsXRosWLWLnnXeOvfbaK6ZMmRI1atSIWrVqpet5dfXlX3nllahdu3bGhTybWqLCr3r16pX7IO85c+akO2qNGzeOlStXxqJFizIOdmun+OU55phj4phjjom5c+fGyy+/HCNHjowaNWpU6g1cpQ1TeQ9Vrog999wzXfFat24dRx11VNxwww1xyCGHRFZWVtSrVy8OOeSQjIeIlyq9r7/0WUfz5s3LeKDjuh6CvvZ9t/Xq1YuGDRvGXXfdVe70pQf8pk2bxpgxY2LlypXxwQcfxM033xznnHNO/OUvf4nttttug+PXVpHt+2PVpUuXGDt2bNx+++1lQpoXX3wx9tlnn4yHK1bkr1HbbLNNHHHEETF58uQ4++yzY/LkydGpU6f0Xwrr1q0bWVlZ0b9//3Qgtqa1w8+KaNiwYTRo0CDdSfvyyy/jo48+ivHjx2cso7w3efTs2TPGjBkTr776ajz55JNRXFyc0bmoSN2N+OGh5oceemgsXrw4/vKXv8TIkSPjsssuK/eEfEMOOeSQ2HvvvdMnpaXLWvtKioULF5Y7/9rtRukLCNZ8ntjKlStjwYIFGQHYnDlz0tOUtglrf1dpXV87OKsOPXr0iMsuuyymT5+evjqq9K/0pcsbN25c7LTTTmXmLb1yo379+hvVjpX+3jlz5mS0P6Xrbs3O28be89+tW7f0MwrWdUD905/+FHXq1Ilbb701ffXhmgHUmmXZ2PZ6bTk5OXHPPffEySefHPfee296+B133JE+qbrooovSr58urfdXXnlltGzZMpYuXRrnnntudOjQIb799tuMelqR/Wfq1Kkxa9asuPPOO9Nvnoz44URx7W1d3rqvV69edOjQodyTqDXb7Oo4VpYnOzs7zjnnnLj44ovjk08+yRhXuq1K19Xa1hVgVqVPsC7lzVvePr+x+0B2dnb06dMn+vTpE7Nnz47nn38+Ro8eHQ0aNFhn+FddPvvss5g9e3a6g70p24sk9BEqsl9WdB3+WGVnZ6f7pS1btoymTZvGCSecEOPHj4/hw4dHxA/9nMMOOywuuuii9HxrHncro3HjxuVu5zX3u9L+z9r74qJFi2LFihWb5LhaEfXq1Sv36o85c+aUKVN5fe+IDdeTunXrxuWXXx6XX355fPrpp/HAAw/E8OHDIz8/v8pvy93aPf300zFlypR48MEHo3Xr1vHcc8/F1VdfHU899VTk5OSkn8f017/+NeO5qKXBfUWvwly7r1zRfl5F27BNdYxNgvWdb9WrVy8KCgri17/+9Xq/o7zzgHU9W3jt/bQy50WVtd1228UZZ5wRd9xxR8ZzRiOqfhypXbt27LvvvjFlypRYsGBBuq048MAD4913342aNWvGfvvtlz5uVVdfftiwYfH444/H6aefHg8//HC5Za9uibrt8YADDoi33347o4JOnz49Pv300zjggAMiImLfffeNiB8ehFmqpKSk3LevrUvDhg2jV69e0b59+5g+fXp6eM2aNdd7pU5ERLNmzWKnnXZKv/WsKrbbbrsYPHhw/Pvf/44//elPEfHD5eKff/55OiRb81/pg/z22muvqFWrVnqeUmt/Xpd27drF3Llzo2bNmmWWUVhYWObhmTVr1oyDDjoo+vXrF4sXLy7TAd7Q+FIV2b4/VqUnbS+//HKZt/osW7Ys49L6iCjz5sx16d69e3z00Ufx+uuvx9SpU9O3PEb88OrfoqKimD59ernbaWM61P/3f/8X8+bNSwdnpfV9zfLPnDkz42HIpRo3bhwdO3aMu+++O15//fUyf7WoSN1dU506daJr167RrVu3CnWi134zZsQP6/6bb77J+MvFTjvtVOb73nzzzXK/849//GPG55deeil22GGHMo33mtOtXr06/vSnP8V+++0XET+c4DVs2LDMGxhfeOGFqFmzZrkn8murSNuzpp/97GdRq1atuP/+++Ptt99OX/UVEdGqVauoXbt2zJo1q9x6U7rt27ZtG2+//XaZtxBtqFyFhYVRs2bNcn9vo0aNquUktVWrVtG9e/fo06fPOg+kpfvdmgfltfe76myvSzVq1Cjuvffe9HLnzJkTBQUF6fVbu3btdBhXp06dqFGjRsyYMSMKCwvjoIMOir59+8bLL7+cvk2yVEX2n9LO15r76/vvv18m9FuXtm3bxmeffRbNmzcvs4w1b3EqVZVj5bp07do1dt999zK3NZRuq9J1tfa/8t7cFVE9fYK1LVq0KN56662Mz2+++WZ6n6/OfWDHHXeMvn37RkFBQcY63hSWL18e11xzTeTm5qYfilud7cW6bM19hIrslxVdh1uLwsLC6NatWzz99NPpK5yr0s9ZW8uWLeOdd97JuOLyrbfeyrjSYLvttot99tmn3H0sIrZYfTjggANi2rRpGfvqggUL4s0339xgmTamnhQUFKTf7lbaryndDlvqbogtZd68eTFq1Kg47rjj0negXH311TFt2rT0y6Vat24dhYWFcccdd1Tpj15r95Ur2s+rbBu2KY6xW7v1nW+1a9cuZsyYETvssEO5+1Cp8s4D3njjjQotvzLnRRvj1FNPjdzc3DIP9a9o+7C+/b9169bx7rvvxnvvvZd+vMaBBx4Yf/vb32LKlCkZ4Xl19WNq164dEydOjPr160efPn3KPVerblvdlV+rV68us6IjfjgYnn766fH0009H375949xzz43ly5fHrbfeGjvvvHP6r5R77bVXHHnkkXHttdfG0qVL4yc/+Uk8/vjjsWzZsvUmk2PGjIn58+fHQQcdFI0aNYpp06bF66+/Hqeffnp6mmbNmsXLL78crVu3jtq1a0fTpk0z3i4U8UP6eemll8aFF14Y5513XhxzzDGRm5sbU6dOjcLCwg0+e2xtxx57bEyYMCEmTpwYRx55ZJx++unx3HPPxamnnhq9e/eOn/zkJzF37tz4+9//HjvuuGOcfvrp0aBBgzj55JNjwoQJUatWrXQHofT+3NITr3Vp3759dOrUKc4666w466yzoqCgIJYuXRr//ve/48svv4xf//rX8cknn8QNN9wQXbt2jSZNmsTixYvjzjvvjF122SV22223DY4vT0W2749Zjx49Yvz48fHOO+/ELrvskh7erl27GDFiRIwfPz5atWoVr732WsaJ0/q0a9cu6tevH7/85S8jLy+vzF8CLrnkkujTp09ccMEF0a1bt8jLy4tZs2bFm2++GT179tzgW0e+/PLLmDp1aqRSqZg9e3bcc8896VvDIv7/CWfpW06WLFkSY8aMWedVFieccEL069cv8vLyyjyLoyJ199FHH42pU6fGIYccEo0bN46vv/46nn322YzndaxLjx49olOnTnHwwQfHDjvsELNnz46HHnoo5s2bF3369ElP17lz57j//vujsLAwmjZtGs8++2y599dHRLz99ttxww03RPv27eONN96I3//+93HllVdm7EM1a9aMO+64I5YvX55+2+OsWbPSJ+85OTkxYMCAuPbaa6Nhw4bRoUOHmDp1akycODH69OlToROfirQ9a6pTp0507NgxHnvsscjKysq4Oqr07Uc33nhjzJo1Kw466KDIycmJGTNmxMsvvxxjx46N2rVrx+mnnx6///3v49RTT41zzz03mjRpEjNmzIgvvvgiLr744nS53n777XjjjTciLy8vdt1112jYsGGceuqpcc8990Rubm4UFRXFa6+9FpMmTYorrrhioy89X1NWVlbceOON652mffv2cf/998c111wTRx55ZHzwwQfx+9//vsz3VGd7XWrXXXeNM844I2677bYYMmRIPPLII2Vuuyld/vbbbx8PPvhgLFmyJDp27Ji+YuuDDz7I6KxVZP8pKiqKbbfdNoYPHx79+vWL2bNnx9ixY9cZDK1t8ODBcfzxx8eZZ54ZJ5xwQmy//fbxf//3f/Huu+9G69ato3v37tV2rFyXnJyc6N+/f/qEbs11NWzYsBg6dGh6XdWuXTv++9//xmuvvRZDhgwp99lvG9snWJ/69evH5ZdfHoMHD466devGxIkTI5VKpduZqu4DV155ZeTl5UVRUVHk5eXF+++/H5988knGlQpVVVJSElOnTo2IH57pNG3atHjsscfSb70r/eNJdbYXa0pKH6Ei+2VF1+HWZMCAATF58uS4//77Y+jQodGuXbt44IEH4qGHHoo99tgjnn322fjyyy836rv79OkTv/3tb+Pss8+Os88+OxYuXBhjx44tc8vXoEGDYuDAgTF06NA4+uij4z//+U/ccsst0blz5416q1t16NmzZ9x3333Rv3//uOCCC9Jve6xRo0ZGP6Q8Fa0nJ510Uhx55JGx1157RU5OTjzzzDNRs2bN9Ilr6fPGHn744TjiiCNim2222WLrY3MaNWpURERGe7P33nvHqaeeGmPGjIkuXbrEjjvuGKNHj44+ffpEz549o3fv3lFYWBhZWVkxc+bMePTRRyM3N7dMkLuhvnJF+3kVacM29TE2CdZ1vnXsscfGo48+Gr17946+ffvGHnvsEYsWLYqPPvoo/UbCiB/OA66++uoYN25c+rys9Hi4IZU9L6qsOnXqRO/evcvcflvR9mF9+/+BBx4YEydOjOzs7HTYeuCBB6afubjmIweqsy9fp06duPfee6N3795xxhlnxAMPPLBJ/+iz1YVfy5cvL/fy8VGjRsUxxxwTDz74YIwaNSqGDh0a2dnZ0b59+xg2bFjGTn/dddfFiBEjYtSoUZGbmxvHHXdc7LXXXvHwww+vc7mFhYVx//33xwsvvBCLFy+OnXbaKc4888w499xz09NceeWVcd1118XZZ58dy5YtiwceeKDccKFr166xzTbbxIQJE+LCCy+MWrVqRfPmzcs8PLsiatasGeecc0786le/infeeSeKi4vjsccei1tvvTVuuummmD9/fjRq1Cj222+/jO+/6KKLYtWqVXHXXXdFSUlJHHnkkdGvX78YMWJEuSdhaxszZkzcdddd8cgjj8TMmTOjbt26sddee6Wf4dS4cePYfvvt484774zZs2dH3bp1o3Xr1nHjjTdGTk7OBseXZ+edd67Q9v2xysnJiX79+sWvfvWrjOEnnXRSfP311/HQQw/FPffcEwcffHCMHj06fdBcn5o1a0bnzp3jsccei+OPP77MVXf7779//Pa3v42xY8fGZZddFitXroyddtop2rRpU+4zM9Z28803p/+/QYMGsffee8f999+fbgBzc3Nj7NixMWLEiDj//PNj5513jnPPPTfefvvtch8wffDBB0ft2rWjW7duUatWrYxxDRo02GDdLSgoiFdeeSVGjhwZ8+fPj8aNG0e3bt3KbRPWNmjQoHjllVfi+uuvj7lz50aDBg2ioKAg7rvvvmjTpk16ugEDBsScOXNi/PjxkZWVFSeeeGL07t07rr/++jLfOWLEiHjsscfikUceie222y7OP//89O12pWrWrBk333xzDB8+PKZNmxa77rprjBkzJuO2s9NOOy1q1KgR9913XzzyyCPRuHHjGDRoUIVeqR5R8bZnTT169IiXXnopiouLy4Qfffv2jR133DF+85vfxEMPPRQ1atSI3XbbLTp27Jju9DVo0CAeeeSRGD16dNx0002xdOnS2GWXXTJuibvwwgvj6quvjvPOOy++//77GDlyZPTs2TMuueSSqFu3bjz55JMxYcKE2GWXXWL48OFx0kknVej3VocOHTrE0KFD46GHHoqnn3469t9//7jzzjvLfUBydbXXayq9Im3GjBnRv3//uPfee8t9XlPdunXjuuuuiwkTJqSvlNh2223LXElRkf1n++23j9tuuy1GjRoVAwYMiD322COGDx8ed999d4XKvPvuu8cTTzwRt956awwfPjyWLFkSjRs3jgMPPDDdearOY+W6HH300TF+/Pj4+uuvM4Z36dIl8vLyMtbVLrvsEocccsh6n5W3MX2C9WncuHEMHTo0Ro0aFV999VXstddecc8992SUoSr7QKtWreLxxx+PJ554IpYuXRpNmjSJyy67LH01VnVYtmxZnHjiiRHxQ33bddddo23btjFu3LiMh3VHVF97saak9BEqsl9GVGwdbk2aNWsWXbt2jUceeST69+8fAwcOjHnz5sWYMWMi4oeTy1/96lcVPsataYcddoiJEyfGtddeG+eff37stttuceWVV8Ytt9ySMd3hhx8et912W4wfPz4GDBgQ9evXjxNOOCHj1svNrU6dOvHggw/G9ddfH1dccUWUlJTE/vvvHw899FDsvPPOG5y/IvVk//33j2eeeSa+/vrryM7Ojvz8/JgwYUJ6v23evHmcd9558cQTT8Tdd98dO++8c/z5z3/epL97S5syZUr87ne/i2uuuabMs9gGDx4cL7zwQowcOTJuvfXW2H333ePpp5+Oe+65J373u9/FuHHjIisrK5o0aRIHH3xw3HzzzWXOkzbUV46oWD+vIm3Y5jjGbu3Wdb6Vm5sbDzzwQIwdOzYmTJgQ3333XdSvXz+aN2+ecSzq1atXfPXVV/HII4+kX9Rx4YUXVqjtqOx50cbo3bt33HfffbF48eKM4RVpH9a3/x9wwAGRk5MT+fn56TreqFGjaNasWXz11VfpZ+OVqs6+fOlzCk899dQ488wz4/77769QHrExslKpVGqTfPNW5pRTTons7Oz0pa//iy6++OJ47733En8QZMt566234vTTT4+nnnoqfbvR1uidd96J3r17x5NPPplx9c3axo4dG/fee2+1Xe4MbB76BAAAybLVXflVHV566aX45ptvIj8/P5YuXRqTJk2KKVOmrPPVqEn07rvvxvvvvx8tWrSIkpKSePXVV+O5556LYcOGbemikUCzZ8+Or776Km688cbYf//9t+rgC0gWfQIAgOT7nwy/tt122/j9738fX3zxRaxcuTKaNWsWN954Y7lvxEuqbbfdNl599dWYOHFiLF++PHbZZZcYNmxYxj3jUF0ef/zxuP3222OfffaJa6+9dksXByBNnwAAIPnc9ggAAABAYq3/tX4AAAAAsBUTfgEAAACQWMIvAAAAABJL+AUAAABAYgm/AAAAAEgs4RcAAAAAiSX8AgAAACCxhF8AAAAAJJbwCwAAAIDE+n/qczpRYLhUlQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "HAJ4nWkjm0M0"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}